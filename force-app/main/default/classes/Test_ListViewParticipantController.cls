@IsTest
public class Test_ListViewParticipantController {
    @testsetup
    public static void dataSetup() {
        Terms_And_Conditions__c portalTC = new Terms_And_Conditions__c(Active__c = true);
        insert portalTC;

        List<Account> accounts = new List<Account>();
        Account participantsAccount = new Account(
            Name = CommunityService.COMMUNITY_PARTICIPANT_ACCOUNT_NAME
        );
        insert participantsAccount;

        UserRole userRole_1 = [SELECT Id FROM UserRole WHERE Name = 'View All' LIMIT 1];
        Profile profile_1 = [
            SELECT Id
            FROM Profile
            WHERE Name = 'IQVIA Customer Community Plus Login User'
            LIMIT 1
        ];
        User admin = [
            SELECT Id, Username, UserRoleId
            FROM User
            WHERE
                Profile.Name = 'System Administrator'
                AND UserRoleId = :userRole_1.Id
                AND IsActive = TRUE
            LIMIT 1
        ];
        User user_1;
        Contact contact_1;
        Account account_1;
        System.runAs(admin) {
            account_1 = new Account(Name = 'Community', BillingCountry = 'United States');
            insert account_1;

            contact_1 = new Contact(AccountId = account_1.Id, LastName = 'xgeek');
            insert contact_1;

            user_1 = new User(
                Email = 'yourusername@gmail.com',
                ProfileId = profile_1.Id,
                UserName = 'yourusername@gmail.com',
                Alias = 'Test',
                TimeZoneSidKey = 'America/New_York',
                EmailEncodingKey = 'ISO-8859-1',
                LocaleSidKey = 'en_US',
                LanguageLocaleKey = 'en_US',
                ContactId = contact_1.Id,
                PortalRole = 'Manager',
                FirstName = 'Firstname',
                LastName = 'Lastname'
            );
            insert user_1;
        }
        Test.startTest();
        // System.runAs(user_1) {
        /*  Account SiteAccount = new Account(
                Name = 'Study Site Account',
                BillingCountry = 'United States');
            
            insert SiteAccount;
            
            Contact con = new Contact(
                FirstName = 'PITD',
                LastName = 'PITD',
                AccountId = SiteAccount.Id,
                Email = 'test@con.com');
            insert con; */

        Clinical_Trial_Profile__c clinical = new Clinical_Trial_Profile__c(
            Protocol_ID__c = 'tt123456790',
            Override_Recruitment_Status__c = 'Actively Enrolling',
            NCT_Number__c = 'NCT00000002',
            Link_to_Pre_screening__c = 'some link',
            Study_Title__c = 'Some Title',
            Study_Code_Name__c = 'Some Code Name',
            Suppress_Participant_Emails__c = false
        );
        insert clinical;

        Study_Site__c studySite = new Study_Site__c(
            Name = 'Test',
            Study_Site_Phone__c = '0000034445',
            Principal_Investigator__c = contact_1.Id,
            Clinical_Trial_Profile__c = clinical.Id,
            Site__c = account_1.Id,
            Study_Site_Type__c = 'Traditional',
            Suppress_Participant_Emails__c = false
        );
        insert studySite;

        HCP_Enrollment__c hcpEnrollment = new HCP_Enrollment__c(
            Study_Site__c = studySite.Id,
            HCP_Contact__c = contact_1.Id,
            Status__c = HCPEnrollmentService.HCP_S_ACTIVATION_PENDING
        );
        insert hcpEnrollment;

        Participant__c participant = new Participant__c(
            First_Name__c = 'ParticipantTD',
            Last_Name__c = 'ParticipantTD',
            Phone__c = '55313535',
            Email__c = 'part1@email.com',
            Mailing_Country_Code__c = 'US',
            Mailing_State_Code__c = 'AL',
            age__c = 23,
            site__c = account_1.id,
            // Present_Age__c =
            Adult__c = true
        );
        insert participant;

        Participant_Enrollment__c pe = new Participant_Enrollment__c(
            HCP__c = hcpEnrollment.Id,
            Pre_screening_Status__c = ParticipantEnrollmentService.PES_STATUS_NOT_REQUIRED,
            Medical_Record_Review_Status__c = ParticipantEnrollmentService.MRR_STATUS_PASS,
            PI_Contact__c = contact_1.Id,
            Initial_visit_scheduled_date__c = date.today(),
            Study_Site__c = studySite.Id,
            Patient_ID__c = 'SomePatientId1',
            Referral_Source__c = 'HCP',
            Source_Type__c = 'Referring Provider',
            HighRisk_Indicator__c = 'Yes',
            Participant_Status__c = 'Received',
            Participant__c = participant.Id,
            Screening_ID__c = 'PESCR1'
        );
        insert pe;

        /*   Participant_Enrollment__c pe1 = new Participant_Enrollment__c(
                HCP__c = hcpEnrollment.Id,
                Pre_screening_Status__c = ParticipantEnrollmentService.PES_STATUS_NOT_REQUIRED,
                Medical_Record_Review_Status__c = ParticipantEnrollmentService.MRR_STATUS_PASS,
                PI_Contact__c = contact_1.Id,
                Initial_visit_scheduled_date__c = date.today(),
                Study_Site__c = studySite.Id,
                Patient_ID__c = 'SomePatientId1',
                Referral_Source__c = 'HCP',
                Source_Type__c = 'Referring Provider',
                HighRisk_Indicator__c = 'Yes',
                Participant_Status__c = 'Received',
                Participant__c = participant.Id,
                Screening_ID__c = 'PESCR1'
                );
               insert pe1; */

        // }
    }
    @IsTest
    public static void runTest() {
        
        Participant_Enrollment__c pe = [SELECT ID,Clinical_Trial_Profile__c,Study_Site__c FROM Participant_Enrollment__c LIMIT 1];
        Clinical_Trial_Profile__c clinical = [SELECT ID FROM Clinical_Trial_Profile__c WHERE Id =:pe.Clinical_Trial_Profile__c LIMIT 1];
		
        Study_Site__c studySite = [SELECT ID FROM Study_Site__c WHERE Id =:pe.Study_Site__c LIMIT 1];
        
        participant__c p = [SELECT Present_Age__c FROM participant__c LIMIT 1];
        system.debug(p.Present_Age__c);
        contact con = [SELECT id FROM contact LIMIT 1];
        user u = [SELECT id FROM user WHERE email = 'yourusername@gmail.com' LIMIT 1];
        ListViewParticipantController.ListWrapper lw = new ListViewParticipantController.ListWrapper();
        lw.SelectedIds = new List<Id>{ pe.id };
        lw.pageSize = 5;
        lw.pageNumber = 3;
        lw.Sortby = 'Ascending';
        lw.Status = 'Active';
        lw.Study = clinical.id;
        lw.StudySites = '';
        lw.Source = '';
        lw.isHighRiskOccupation = 'true';
        lw.isComorbidities = 'false';
        lw.Ethnicity = '';
        lw.AgeFrom = '0';
        lw.AgeTo = '25';
        lw.highPrioritySelected_YesIds = new List<Id>{ pe.id };
        lw.highPrioritySelected_NoIds = new List<id>();
        lw.isInitialVisitScheduled = 'true';
        lw.Sex = '';
        lw.isExport = 'true';
        lw.startPos = 1;
        lw.endPos = 45000;

        System.runAs(u) {
            ListViewParticipantController.getInitData(
                clinical.ID,
                studySite.Id,
                'PI',
                null,
                'Janssen'
            );

            ListViewParticipantController.getSSList(studySite.Id);

            ListViewParticipantController.getParticipantStatus('Active');

            ListViewParticipantController.getParticipantStatus('Inactive');

            ListViewParticipantController.updateParticipantData(
                new List<String>{ pe.id },
                new List<String>{ pe.id },
                new List<String>{ pe.id }
            );

            ListViewParticipantController.fetchData(
                JSON.serialize(new List<ListViewParticipantController.ListWrapper>{ lw })
            );
            LabelValueItem lv = new LabelValueItem(Label.Referring_Provider, 'Referring Provider');

            ListViewParticipantController.labelValueItemsHaveItem(
                new List<LabelValueItem>{ lv },
                'Referring Provider'
            );
            ListViewParticipantController.SearchResult sr = new ListViewParticipantController.SearchResult();
            sr.peList = new List<ListViewParticipantController.PEWrapper>();
            sr.PaginationData = new PaginationData();
            ListViewParticipantService.PEFilter pef;
            sr.peFilter = new ListViewParticipantService.PEFilter(
                new ListViewParticipantService.PEFilterData()
            ); //PEFilter;

            sr.peList = new List<ListViewParticipantController.PEWrapper>();

            ListViewParticipantController.updateSearchResultAccordingItemChanged(sr, 'Inactive');
            ListViewParticipantController.updateSearchResultAccordingItemChanged(sr, 'active');
            ListViewParticipantController.updateSearchResultAccordingItemChanged(sr, 'test');
            ListViewParticipantController.getParticipantData(pe.id, con.id);
            // ListViewParticipantController.updateSearchResultAccordingItemChanged(sr, 'active');
        }
    }

    @IsTest
    public static void runTest1() {
        Clinical_Trial_Profile__c clinical = [SELECT ID FROM Clinical_Trial_Profile__c LIMIT 1];
        Study_Site__c studySite = [SELECT ID FROM Study_Site__c LIMIT 1];
        Participant_Enrollment__c pe = [SELECT ID FROM Participant_Enrollment__c LIMIT 1];
        participant__c p = [SELECT Present_Age__c FROM participant__c LIMIT 1];
        system.debug(p.Present_Age__c);
        contact con = [SELECT id FROM contact LIMIT 1];
        user u = [SELECT id FROM user WHERE email = 'yourusername@gmail.com' LIMIT 1];
        ListViewParticipantController.ListWrapper lw = new ListViewParticipantController.ListWrapper();
        lw.SelectedIds = new List<Id>();
        lw.pageSize = 5;
        lw.pageNumber = 3;
        lw.Sortby = 'Ascending';
        lw.Status = 'Active';
        lw.Study = clinical.id;
        lw.StudySites = '';
        lw.Source = '';
        lw.isHighRiskOccupation = 'true';
        lw.isComorbidities = 'false';
        lw.Ethnicity = '';
        lw.AgeFrom = '0';
        lw.AgeTo = '25';
        lw.highPrioritySelected_YesIds = new List<Id>{ pe.id };
        lw.highPrioritySelected_NoIds = new List<id>();
        lw.isInitialVisitScheduled = 'true';
        lw.Sex = '';
        lw.isExport = 'true';
        lw.startPos = 1;
        lw.endPos = 45000;

        System.runAs(u) {
            ListViewParticipantController.getInitData(
                clinical.ID,
                studySite.Id,
                'PI',
                null,
                'Janssen'
            );

            ListViewParticipantController.getSSList(studySite.Id);

            ListViewParticipantController.getParticipantStatus('Active');

            ListViewParticipantController.getParticipantStatus('Inactive');

            ListViewParticipantController.updateParticipantData(
                new List<String>{ pe.id },
                new List<String>{ pe.id },
                new List<String>{ pe.id }
            );

            ListViewParticipantController.fetchData(
                JSON.serialize(new List<ListViewParticipantController.ListWrapper>{ lw })
            );
            LabelValueItem lv = new LabelValueItem(Label.Referring_Provider, 'Referring Provider');

            ListViewParticipantController.labelValueItemsHaveItem(
                new List<LabelValueItem>{ lv },
                'Referring Provider'
            );
            ListViewParticipantController.SearchResult sr = new ListViewParticipantController.SearchResult();
            sr.peList = new List<ListViewParticipantController.PEWrapper>();
            sr.PaginationData = new PaginationData();
            ListViewParticipantService.PEFilter pef;
            sr.peFilter = new ListViewParticipantService.PEFilter(
                new ListViewParticipantService.PEFilterData()
            ); //PEFilter;

            sr.peList = new List<ListViewParticipantController.PEWrapper>();

            ListViewParticipantController.updateSearchResultAccordingItemChanged(sr, 'Inactive');
            ListViewParticipantController.updateSearchResultAccordingItemChanged(sr, 'active');
            ListViewParticipantController.updateSearchResultAccordingItemChanged(sr, 'test');
            ListViewParticipantController.getParticipantData(pe.id, con.id);
            // ListViewParticipantController.updateSearchResultAccordingItemChanged(sr, 'active');
        }
    }
    @IsTest
    public static void runTest3() {
        Clinical_Trial_Profile__c clinical = [SELECT ID FROM Clinical_Trial_Profile__c LIMIT 1];
        Study_Site__c studySite = [SELECT ID FROM Study_Site__c LIMIT 1];
        Participant_Enrollment__c pe = [SELECT ID FROM Participant_Enrollment__c LIMIT 1];
        participant__c p = [SELECT Present_Age__c FROM participant__c LIMIT 1];
        system.debug(p.Present_Age__c);
        contact con = [SELECT id FROM contact LIMIT 1];
        user u = [SELECT id FROM user WHERE email = 'yourusername@gmail.com' LIMIT 1];
        ListViewParticipantController.ListWrapper lw = new ListViewParticipantController.ListWrapper();
        lw.SelectedIds = new List<Id>{ pe.id };
        lw.pageSize = 5;
        lw.pageNumber = 3;
        lw.Sortby = 'Ascending';
        lw.Status = 'Inactive';
        lw.Study = clinical.id;
        lw.StudySites = '';
        lw.Source = '';
        lw.isHighRiskOccupation = 'true';
        lw.isComorbidities = 'false';
        lw.Ethnicity = '';
        lw.AgeFrom = '0';
        lw.AgeTo = '150';
        lw.highPrioritySelected_YesIds = new List<Id>{ pe.id };
        lw.highPrioritySelected_NoIds = new List<id>();
        lw.isInitialVisitScheduled = 'true';
        lw.Sex = '';
        lw.isExport = 'true';
        lw.startPos = 1;
        lw.endPos = 45000;

        System.runAs(u) {
            ListViewParticipantController.getInitData(
                clinical.ID,
                studySite.Id,
                'PI',
                null,
                'Janssen'
            );

            ListViewParticipantController.getSSList(studySite.Id);

            ListViewParticipantController.getParticipantStatus('Active');

            ListViewParticipantController.getParticipantStatus('Inactive');

            ListViewParticipantController.updateParticipantData(
                new List<String>{ pe.id },
                new List<String>{ pe.id },
                new List<String>{ pe.id }
            );

            ListViewParticipantController.fetchData(
                JSON.serialize(new List<ListViewParticipantController.ListWrapper>{ lw })
            );
            LabelValueItem lv = new LabelValueItem(Label.Referring_Provider, 'Referring Provider');

            ListViewParticipantController.labelValueItemsHaveItem(
                new List<LabelValueItem>{ lv },
                'Referring Provider'
            );
            ListViewParticipantController.SearchResult sr = new ListViewParticipantController.SearchResult();
            sr.peList = new List<ListViewParticipantController.PEWrapper>();
            sr.PaginationData = new PaginationData();
            ListViewParticipantService.PEFilter pef;
            sr.peFilter = new ListViewParticipantService.PEFilter(
                new ListViewParticipantService.PEFilterData()
            ); //PEFilter;

            sr.peList = new List<ListViewParticipantController.PEWrapper>();

            ListViewParticipantController.updateSearchResultAccordingItemChanged(sr, 'Inactive');
            ListViewParticipantController.updateSearchResultAccordingItemChanged(sr, 'active');
            ListViewParticipantController.updateSearchResultAccordingItemChanged(sr, 'test');
            ListViewParticipantController.getParticipantData(pe.id, con.id);
            // ListViewParticipantController.updateSearchResultAccordingItemChanged(sr, 'active');
        }
    }
    @IsTest
    public static void runTest4() {
        Clinical_Trial_Profile__c clinical = [SELECT ID FROM Clinical_Trial_Profile__c LIMIT 1];
        Study_Site__c studySite = [SELECT ID FROM Study_Site__c LIMIT 1];
        Participant_Enrollment__c pe = [SELECT ID FROM Participant_Enrollment__c LIMIT 1];
        participant__c p = [SELECT Present_Age__c FROM participant__c LIMIT 1];
        system.debug(p.Present_Age__c);
        contact con = [SELECT id FROM contact LIMIT 1];
        user u = [SELECT id FROM user WHERE email = 'yourusername@gmail.com' LIMIT 1];
        ListViewParticipantController.ListWrapper lw = new ListViewParticipantController.ListWrapper();
        lw.SelectedIds = new List<Id>{ pe.id };
        lw.pageSize = 5;
        lw.pageNumber = 3;
        lw.Sortby = 'Ascending';
        lw.Status = 'Inactive';
        lw.Study = clinical.id;
        lw.StudySites = '';
        lw.Source = '';
        lw.isHighRiskOccupation = 'true';
        lw.isComorbidities = 'false';
        lw.Ethnicity = '';
        lw.AgeFrom = '0';
        lw.AgeTo = '150';
        lw.highPrioritySelected_YesIds = new List<Id>{ pe.id };
        lw.highPrioritySelected_NoIds = new List<id>();
        lw.isInitialVisitScheduled = 'true';
        lw.Sex = '';
        lw.isExport = 'true';
        lw.startPos = 1;
        lw.endPos = 45000;

        System.runAs(u) {
            ListViewParticipantController.getInitData(
                clinical.ID,
                studySite.Id,
                'RP',
                null,
                'Janssen'
            );

            ListViewParticipantController.getSSList(studySite.Id);

            ListViewParticipantController.getParticipantStatus('Active');

            ListViewParticipantController.getParticipantStatus('Inactive');

            ListViewParticipantController.updateParticipantData(
                new List<String>{ pe.id },
                new List<String>{ pe.id },
                new List<String>{ pe.id }
            );

            ListViewParticipantController.fetchData(
                JSON.serialize(new List<ListViewParticipantController.ListWrapper>{ lw })
            );
            LabelValueItem lv = new LabelValueItem(Label.Referring_Provider, 'Referring Provider');

            ListViewParticipantController.labelValueItemsHaveItem(
                new List<LabelValueItem>{ lv },
                'Referring Provider'
            );
            ListViewParticipantController.SearchResult sr = new ListViewParticipantController.SearchResult();
            sr.peList = new List<ListViewParticipantController.PEWrapper>();
            sr.PaginationData = new PaginationData();
            ListViewParticipantService.PEFilter pef;
            sr.peFilter = new ListViewParticipantService.PEFilter(
                new ListViewParticipantService.PEFilterData()
            ); //PEFilter;

            sr.peList = new List<ListViewParticipantController.PEWrapper>();

            ListViewParticipantController.updateSearchResultAccordingItemChanged(sr, 'Inactive');
            ListViewParticipantController.updateSearchResultAccordingItemChanged(sr, 'active');
            ListViewParticipantController.updateSearchResultAccordingItemChanged(sr, 'test');
            ListViewParticipantController.getParticipantData(pe.id, con.id);
            // ListViewParticipantController.updateSearchResultAccordingItemChanged(sr, 'active');
        }
    }
    
}