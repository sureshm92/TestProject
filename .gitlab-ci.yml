image: ajit2408/studyhub-sfdx
stages:
    - RUNTEST
    - SonarCheck 
        
RUNTEST:
  artifacts:
     paths:
      - $CI_PROJECT_DIR/results
     expire_in: 1 week
  only:
    variables:
        - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^master/
    refs: 
        - merge_requests

  stage: RUNTEST
  script: 
      - echo $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
      - echo $CI_PROJECT_DIR
      - mkdir $CI_PROJECT_DIR/results/
      - echo "$INF11" > sfdx-auth-url
      - "echo 'y' | sfdx force:auth:sfdxurl:store -f sfdx-auth-url -a INF11 -d"
      - sfdx force:apex:test:run -u INF11 -w 350 --resultformat json --outputdir $CI_PROJECT_DIR/results/ --codecoverage --testlevel RunLocalTests 
     
SonarCheck:
  stage: SonarCheck
  allow_failure: true
  only:
    variables:
        - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^master/
    refs: 
        - merge_requests
  image:
      name: sonarsource/sonar-scanner-cli:latest
      entrypoint: [""]
  cache:
     key: "${CI_JOB_NAME}"
     paths:
       - .sonar/cache
  before_script:
     - echo "Sonar Analysis"
  script:
     - |
             apk upgrade --update-cache --available && apk add openssl curl jq 
             openssl s_client -connect  sonarqube.quintiles.com:443 | keytool -import -noprompt -alias sonarqbue_test -keystore $JAVA_HOME/lib/security/cacerts -storepass changeit
             sonar-scanner -Dsonar.branch.name=$CI_MERGE_REQUEST_TARGET_BRANCH_NAME -Dsonar.exclusions=**/*.js,**/*.xml,**/*.html -Dsonar.apex.coverage.reportPath=$CI_PROJECT_DIR/results/test-result-codecoverage.json
             #sonar-scanner -Dsonar.apex.coverage.reportPath=$CI_PROJECT_DIR/tests/apex/test-result-codecoverage.json -Dsonar.branch.name=master
             cat .scannerwork/report-task.txt
             export url=$(cat .scannerwork/report-task.txt | grep ceTaskUrl | cut -c11- ) #URL where report gets stored
             export dashboardUrl=$(cat .scannerwork/report-task.txt | grep dashboardUrl | cut -c11- )
             echo "sleep 140s" #Wait time for the report
             sleep 140s
             curl -k --progress-bar -u "$SONAR_TOKEN":"" $url -o analysis.json
             cat analysis.json
             export status=$(cat analysis.json | jq -r '.task.status') #Status as SUCCESS, CANCELED or FAILED
             export analysisId=$(cat analysis.json | jq -r '.task.analysisId') #Get the analysis Id
             echo "URL" $url
             echo "status" $status
             echo  "analysisId" $analysisId
             echo "Status=$status">sonarResult.json
             echo "DashboardURL=$dashboardUrl">>sonarResult.json 

     - |
       if [ "$status" == "SUCCESS" ];then 
         echo -e "SONAR ANALYSIS SUCCESSFUL...ANALYSING RESULTS";
         curl -k -u "$SONAR_TOKEN":"" $SONAR_HOST_URL/api/qualitygates/project_status?analysisId=$analysisId -o result.txt; #Analysis result like critical, major and minor issues
         export result=$(cat result.txt | jq -r '.projectStatus.status');
         cat result.txt
          echo "Result -> $result"
          if [ "$result" == "ERROR" ];then
           echo -e "SONAR RESULTS FAILED";
           echo "$(cat result.txt | jq -r '.projectStatus.conditions')"; #prints the critical, major and minor violations
           echo "Result=$result">>sonarResult.json;
           exit 0 #breaks the build for violations
          else
           echo -e "SONAR RESULTS SUCCESSFUL";
           echo "$(cat result.txt | jq -r '.projectStatus.conditions')";
           echo "Result=$result">>sonarResult.json;
           exit 0 
          fi
       else 
        echo -e "\e[91mSONAR ANALYSIS FAILED\e[0m";
        exit 1 #breaks the build for failure in Step2
       fi	
 
