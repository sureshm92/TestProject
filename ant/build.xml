<!-- Author leonid Bartenev -->
<project name="Deployment script" basedir="." xmlns:sf="antlib:com.salesforce">

    <property file="build.properties"/>
    <property environment="env"/>

    <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
        <classpath>
            <pathelement location="${ant.salesforce.lib}"/>
        </classpath>
    </taskdef>

    <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
        <classpath>
            <pathelement location="${ant.xmltask.lib}"/>
        </classpath>
    </taskdef>

    <tstamp>
        <format property="nowDT" pattern="yyyy-MM-dd__HH-mm"  locale="en,US" />
    </tstamp>

    <!-- targets: -->

    <target name="deploy-int" depends="prepare-metadata, skip-community">
        <sf:deploy username="${sf.int.username}"
                   password="${sf.int.password}"
                   serverurl="${sf.serverurl}"
                   maxPoll="${sf.maxPoll}"
                   deployRoot="${source.dir}"
                   pollwaitmillis="${sf.maxPollWaitTimeMs}"
                   rollbackOnError="true">
        </sf:deploy>
    </target>

    <target name="validate-int" depends="prepare-metadata">
        <sf:deploy username="${sf.int.username}"
                   password="${sf.int.password}"
                   serverurl="${sf.serverurl}"
                   maxPoll="${sf.maxPoll}"
                   deployRoot="${source.dir}"
                   pollwaitmillis="${sf.maxPollWaitTimeMs}"
                   rollbackOnError="true" checkonly="true">
        </sf:deploy>
    </target>

    <target name="deploy-inf" depends="prepare-metadata, skip-community">
        <sf:deploy username="${sf.inf.username}"
                   password="${sf.inf.password}"
                   serverurl="${sf.serverurl}"
                   maxPoll="${sf.maxPoll}"
                   deployRoot="${source.dir}"
                   pollwaitmillis="${sf.maxPollWaitTimeMs}"
                   rollbackOnError="true">
        </sf:deploy>
    </target>

    <target name="validate-inf" depends="prepare-metadata">
        <sf:deploy username="${sf.inf.username}"
                   password="${sf.inf.password}"
                   serverurl="${sf.serverurl}"
                   maxPoll="${sf.maxPoll}"
                   deployRoot="${source.dir}"
                   pollwaitmillis="${sf.maxPollWaitTimeMs}"
                   rollbackOnError="true" checkonly="true">
        </sf:deploy>
    </target>

    <target name="create-rollback-source">
        <delete dir="${rollback.dir}"/>
        <mkdir dir="${rollback.source.dir}"/>
        <sf:retrieve
                username="${sf.rollback.username}"
                password="${sf.rollback.password}"
                serverurl="${sf.serverurl}"
                retrieveTarget="${rollback.source.dir}"
                unpackaged="${source.dir}/package.xml" />
    </target>

    <target name="rollback">
        <sf:deploy username="${sf.rollback.username}"
                   password="${sf.rollback.password}"
                   serverurl="${sf.serverurl}"
                   maxPoll="${sf.maxPoll}"
                   deployRoot="${rollback.source.dir}"
                   pollwaitmillis="${sf.maxPollWaitTimeMs}" ignorewarnings="true"
                   rollbackOnError="true" checkonly="true">
        </sf:deploy>

    </target>

    <target name="create-distributive" depends="prepare-metadata">
        <delete dir="${dist.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.dir}/part1"/>
        <mkdir dir="${dist.dir}/part2"/>
        <copy todir="${dist.dir}/part1">
            <fileset dir="${source.dir}">
                <include name="staticresources/*.*"/>
            </fileset>
        </copy>
        <xmltask source="${source.dir}/package.xml" dest="${dist.dir}/part1/package.xml">
            <remove path="/:Package/:types[:name[text()!='StaticResource']]"/>
        </xmltask>
        <copy todir="${dist.dir}/part2">
            <fileset dir="${source.dir}">
                <exclude name="staticresources/*.*"/>
                <exclude name="translations/*.*"/>
            </fileset>
        </copy>
        <xmltask source="${source.dir}/package.xml" dest="${dist.dir}/part2/package.xml">
            <remove path="/:Package/:types[:name[text()='StaticResource' or text()='Translations']]"/>
        </xmltask>
        <zip destfile="${dist.dir}/PH_RH_Dist__${nowDT}__Part1.zip">
            <fileset dir="${dist.dir}">
                <include name="part1/**/*.*"/>
            </fileset>
        </zip>
        <zip destfile="${dist.dir}/PH_RH_Dist__${nowDT}__Part2.zip">
            <fileset dir="${dist.dir}">
                <include name="part2/**/*.*"/>
            </fileset>
        </zip>
        <delete dir="${dist.dir}/part1"/>
        <delete dir="${dist.dir}/part2"/>
    </target>

    <!-- filter metadata files before deploy: -->
    <target name="prepare-metadata" depends="convert-project">
        <echo message="Start metadata filtration" level="info"/>
        <xmltask todir="${source.dir}/profiles">
            <fileset dir="${source.dir}/profiles"/>
            <remove path="/:Profile/:userPermissions[:name[text()='EnableCommunityAppLauncher']]"/>
            <remove path="/:Profile/:userPermissions[:name[text()='FieldServiceAccess']]"/>
            <remove path="/:Profile/:userPermissions[:name[text()='SendExternalEmailAvailable']]"/>
            <remove path="/:Profile/:applicationVisibilities[:application[text()='Developer']]"/>
        </xmltask>
        <echo message="Profiles filtered" level="info"/>
        <xmltask todir="${source.dir}/translations">
            <fileset dir="${source.dir}/translations"/>
            <remove path="/:Translations/:customApplications"/>
            <remove path="/:Translations/:customTabs"/>
            <remove path="/:Translations/:flowDefinitions"/>
            <remove path="/:Translations/:quickActions"/>
        </xmltask>
        <echo message="Translations filtered" level="info"/>
        <!-- temporary fix for deployment of Contact (remove Master record type from metadata): -->
        <xmltask source="${source.dir}/objects/Contact.object" dest="${source.dir}/objects/Contact.object">
            <remove path="/:CustomObject/:recordTypes[:fullName[text()='MASTER']]"/>
        </xmltask>
        <xmltask source="${source.dir}/labels/CustomLabels.labels" dest="${source.dir}/labels/CustomLabels.labels">
            <remove path="/:CustomLabels/:labels[:fullName[text()='CommunityURL']]"/>
        </xmltask>

        <xmltask source="${source.dir}/package.xml" dest="${source.dir}/package.xml">
            <remove path="/:Package/:types/:members[text()='Contact.MASTER']"/>
            <!--remove path="/:Package/:types[:name[text()='EmailTemplate']]"/-->
            <!-- temporary remove SiteDotCom file from deployment -->
        </xmltask>
        <echo message="Removed Contact.MASTER record type from metadata" level="info"/>
    </target>

    <target name="skip-community">
        <xmltask source="${source.dir}/package.xml" dest="${source.dir}/package.xml">
            <remove path="/:Package/:types[:name[text()='SiteDotCom']]"/>
        </xmltask>
    </target>

    <target name="retrieve-site-dot-com">
        <sf:retrieve username="${sf.int.username}"
                     password="${sf.int.password}"
                     serverurl="${sf.serverurl}"
                     retrieveTarget="${retrieve.dir}"
                     unpackaged="${retrieve.dir}/sitedotcom-package.xml"/>
        <copyfile src="${retrieve.dir}/siteDotComSites/IQVIA_Referral_Hub_C.site"
                  dest="../force-app/main/default/siteDotComSites/IQVIA_Referral_Hub_C.site"/>
        <delete dir="${retrieve.dir}/siteDotComSites"/>
        <delete file="${retrieve.dir}/package.xml"/>
    </target>

    <target name="delete-spaces">
        <replaceregexp
                file="${dx.default.dir}/workflows/Participant_Enrollment__c.workflow-meta.xml"
                match="(\r?\n)\s*\r?\n"
                replace="\1"
                flags="g"
        />
        <echo message="replace" level="info"/>
    </target>


    <target name="convert-workflow-DX">
        <replace casesensitive="false"
                 file="${dx.default.dir}/workflows/Participant_Enrollment__c.workflow-meta.xml">
            <replacetoken><![CDATA[<senderType>OrgWideEmailAddress</senderType>]]></replacetoken>
            <replacevalue><![CDATA[<senderType>CurrentUser</senderType>]]></replacevalue>
        </replace>
        <replace casesensitive="false"
                 file="${dx.default.dir}/workflows/Participant_Study_Enrollment__c.workflow-meta.xml">
            <replacetoken><![CDATA[<senderType>OrgWideEmailAddress</senderType>]]></replacetoken>
            <replacevalue><![CDATA[<senderType>CurrentUser</senderType>]]></replacevalue>
        </replace>
        <echo message="replace completed" level="info"/>
    </target>

    <target name="convert-workflow-source">
        <replace casesensitive="false"
                 file="${dx.default.dir}/workflows/Participant_Enrollment__c.workflow-meta.xml">
            <replacetoken><![CDATA[<senderType>CurrentUser</senderType>]]></replacetoken>
            <replacevalue><![CDATA[<senderType>OrgWideEmailAddress</senderType>]]></replacevalue>
        </replace>
        <echo message="replace completed" level="info"/>
    </target>

    <target name="convert-project">
        <delete dir="${source.dir}"/>
        <exec dir=".." executable="cmd" osfamily="windows">
            <arg value="/c convert-project.bat"/>
        </exec>
        <!-- TODO test for mac -->
        <exec dir=".." executable="pwsh" osfamily="mac">
            <arg path="../convert-project.bat"/>
        </exec>
    </target>

</project>
