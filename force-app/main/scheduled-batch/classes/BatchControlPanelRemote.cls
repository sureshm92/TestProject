/**
 * Created by Igor Malyuta on 20.11.2019.
 */

public without sharing class BatchControlPanelRemote {
    
    public class BatchControlException extends Exception {}

    private static final String STATE_RUNNING = 'RUNNING';
    private static final String STATE_SCHEDULED = 'SCHEDULED';
    private static final String STATE_STOPPED = 'STOPPED';
    private static final String CSS_RUNNING = 'bcp-state-running';
    private static final String CSS_STOPPED = 'bcp-state-stopped';

    public static final String SCHEDULED_EXTENDS = 'extends Batch_ScheduledAbstract';
    public static final List<String> ASYNC_STATUSES = new List<String>{
            'Holding',
            'Queued',
            'Preparing',
            'Processing'
    };

    @AuraEnabled(Cacheable = true)
    public static String getData() {
        try {
            List<ApexClass> batches = (List<ApexClass>) [FIND :SCHEDULED_EXTENDS IN ALL FIELDS RETURNING ApexClass(Id, Name)][0];
            List<String> batchNames = new List<String>();
            for (ApexClass batch : batches) {
                if (batch.Name.equals('BatchControlPanelRemote')) continue;
                batchNames.add(batch.Name);
            }

            List<Batch_Detail__c> batchDetails = [
                    SELECT Name
                    FROM Batch_Detail__c
                    ORDER BY Name
            ];
            List<String> panelBatchNames = new List<String>();
            for (Batch_Detail__c bc : batchDetails) panelBatchNames.add(bc.Name);

            PanelWrapper wrapper = new PanelWrapper();
            wrapper.availableBatches = new List<String>();
            for (String batchName : batchNames) {
                if (!panelBatchNames.contains(batchName)) wrapper.availableBatches.add(batchName);
            }

            wrapper.intervalMods = new List<String>();
            for (PicklistEntry ple : Batch_Detail__c.Interval_Mode__c.getDescribe().getPicklistValues()) {
                wrapper.intervalMods.add(ple.value);
            }

            wrapper.jobWrappers = (List<JobWrapper>) JSON.deserialize(getJobs(), List<JobWrapper>.class);
            return JSON.serialize(wrapper);
        } catch (Exception e) {
            return (String) AuraHelper.throwException(e);
        }
    }

    @AuraEnabled
    public static String getJobs() {
        try {
            List<Batch_Detail__c> batchDetails = [
                    SELECT
                            Id,
                            Name,
                            Interval_Mode__c,
                            Panel_Label__c,
                            Relaunch_Interval__c,
                            Scope_Size__c
                    FROM Batch_Detail__c
                    ORDER BY Name
            ];

            Map<String, Batch_Detail__c> batchMap = new Map<String, Batch_Detail__c>();
            for (Batch_Detail__c detail : batchDetails) batchMap.put(detail.Name, detail);

            List<AsyncApexJob> asyncApexJobs = [
                    SELECT
                            ApexClass.Name,
                            CompletedDate,
                            Status
                    FROM AsyncApexJob
                    WHERE JobType = 'BatchApex' AND Status IN:ASYNC_STATUSES
                    AND ApexClass.Name IN:batchMap.keySet()
            ];
            Map<String, AsyncApexJob> runningBatches = new Map<String, AsyncApexJob>();
            for (AsyncApexJob asyncApexJob : asyncApexJobs) runningBatches.put(asyncApexJob.ApexClass.Name, asyncApexJob);

            List<CronTrigger> cronTriggers = [
                    SELECT
                            CronJobDetail.Name,
                            NextFireTime
                    FROM CronTrigger
                    WHERE CronJobDetail.Name IN:batchMap.keySet()
            ];
            Map<String, CronTrigger> scheduledBatches = new Map<String, CronTrigger>();
            for (CronTrigger ct : cronTriggers) scheduledBatches.put(ct.CronJobDetail.Name, ct);

            Map<String, AsyncApexJob> completedJobs = new Map<String, AsyncApexJob>();
            for (AsyncApexJob aj : [
                    SELECT ApexClass.Name, CompletedDate, ExtendedStatus
                    FROM AsyncApexJob
                    WHERE Status = 'Completed'
                    AND ApexClass.Name IN:batchMap.keySet()
                    AND CompletedDate >= :System.now().addDays(-2)
                    ORDER BY CompletedDate DESC
            ]) {
                if (!completedJobs.containsKey(aj.ApexClass.Name)) completedJobs.put(aj.ApexClass.Name, aj);
            }

            Map<String, AsyncApexJob> abortedJobs = new Map<String, AsyncApexJob>();
            for (AsyncApexJob aj : [
                    SELECT ApexClass.Name, CompletedDate, ExtendedStatus
                    FROM AsyncApexJob
                    WHERE Status = 'Aborted'
                    AND ApexClass.Name IN:batchMap.keySet()
                    AND CompletedDate >= :System.now().addDays(-2)
                    ORDER BY CompletedDate DESC
            ]) {
                if (!abortedJobs.containsKey(aj.ApexClass.Name)) abortedJobs.put(aj.ApexClass.Name, aj);
            }

            List<JobWrapper> jobWrappers = new List<JobWrapper>();
            for (Batch_Detail__c detail : batchDetails) {
                jobWrappers.add(new JobWrapper(detail, scheduledBatches, runningBatches, completedJobs, abortedJobs));
            }

            return JSON.serialize(jobWrappers);
        } catch (Exception e) {
            return (String) AuraHelper.throwException(e);
        }
    }

    @AuraEnabled(Cacheable = false)
    public static JobWrapper getState(String jobName) {
        try {
            JobWrapper wrapper;
            for (JobWrapper jw : (List<JobWrapper>) JSON.deserialize(getJobs(), List<JobWrapper>.class)) {
                if (jw.jobName.equals(jobName)) {
                    wrapper = jw;
                    break;
                }
            }
            if (wrapper == null) throw new BatchControlException('No batch found!');

            return wrapper;
        } catch (Exception e) {
            return (JobWrapper) AuraHelper.throwException(e);
        }
    }

    @AuraEnabled
    public static String addBatch(String detail) {
        try {
            Batch_Detail__c batchDetail = (Batch_Detail__c) JSON.deserialize(detail, Batch_Detail__c.class);
            insert batchDetail;

            if(batchDetail.First_launch_DT__c != null && batchDetail.First_launch_DT__c > Datetime.now().addMinutes(1)) {
                Integer minutes = Batch_ScheduledAbstract.getMinutesByMode(
                        batchDetail.Interval_Mode__c, batchDetail.Relaunch_Interval__c.intValue());
                System.scheduleBatch((Database.Batchable<SObject>)
                        Type.forName(batchDetail.Name).newInstance(),
                        batchDetail.Name,
                        minutes,
                        batchDetail.Scope_Size__c.intValue()
                );
            }

            return getData();
        } catch (Exception e) {
            return (String) AuraHelper.throwException(e);
        }
    }

    @AuraEnabled
    public static String deleteBatch(String detailId) {
        try {
            delete [SELECT Id FROM Batch_Detail__c WHERE Id = :detailId];

            return getData();
        } catch (Exception e) {
            return (String) AuraHelper.throwException(e);
        }
    }

    @AuraEnabled
    public static void runBatch(String jobName) {
        try {
            JobWrapper jobWrapper = getState(jobName);
            if (jobWrapper.jobId == null) {
                Database.executeBatch((Database.Batchable<SObject>) Type.forName(jobWrapper.jobName).newInstance());
            }
        } catch (Exception e) {
            AuraHelper.throwException(e);
        }
    }

    @AuraEnabled
    public static void stopBatch(String jobName) {
        try {
            JobWrapper jobWrapper = getState(jobName);
            if (jobWrapper.jobId != null) System.abortJob(jobWrapper.jobId);
        } catch (Exception e) {
            AuraHelper.throwException(e);
        }
    }

    public class JobWrapper {
        @AuraEnabled public String css;
        @AuraEnabled public String label;
        @AuraEnabled public String jobId;
        @AuraEnabled public String detailId;
        @AuraEnabled public String jobName;
        @AuraEnabled public AsyncApexJob prevJob;
        @AuraEnabled public Datetime prevLaunch;
        @AuraEnabled public Datetime nextLaunch;
        @AuraEnabled public String state;
        @AuraEnabled public Boolean isStopped;
        @AuraEnabled public String intervalMode;
        @AuraEnabled public Integer interval;

        public JobWrapper(
                Batch_Detail__c detail,
                Map<String, CronTrigger> scheduledBatches,
                Map<String, AsyncApexJob> asyncBatches,
                Map<String, AsyncApexJob> completedJobs,
                Map<String, AsyncApexJob> abortedJobs
        ) {
            this.jobName = detail.Name;
            this.detailId = detail.Id;
            this.label = detail.Panel_Label__c;
            this.intervalMode = detail.Interval_Mode__c;
            this.interval = (Integer) detail.Relaunch_Interval__c;

            isStopped = true;
            if (completedJobs.containsKey(jobName)) {
                prevJob = completedJobs.get(jobName);
                prevLaunch = completedJobs.get(jobName).CompletedDate;
                Long prevExecutionMs = System.now().getTime() - prevJob.CompletedDate.getTime();
                isStopped = prevExecutionMs > 30000;
            }

            if (asyncBatches.containsKey(jobName)) {
                css = CSS_RUNNING;
                jobId = asyncBatches.get(jobName).Id;
                state = STATE_RUNNING;
                isStopped = false;
            } else if (scheduledBatches.containsKey(jobName)) {
                css = CSS_RUNNING;
                jobId = scheduledBatches.get(jobName).Id;
                state = STATE_SCHEDULED;
                isStopped = false;
                nextLaunch = scheduledBatches.get(jobName).NextFireTime;
            } else if (abortedJobs.containsKey(jobName) || (completedJobs.isEmpty() && abortedJobs.isEmpty()) || isStopped) {
                state = STATE_STOPPED;
                css = CSS_STOPPED;
            } else {
                state = STATE_RUNNING;
                isStopped = false;
                css = CSS_RUNNING;
            }
        }
    }

    public class PanelWrapper {
        @AuraEnabled public List<String> availableBatches;
        @AuraEnabled public List<String> intervalMods;
        @AuraEnabled public List<JobWrapper> jobWrappers;
    }
}