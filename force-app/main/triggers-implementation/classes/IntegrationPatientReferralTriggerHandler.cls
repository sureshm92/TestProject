/**
 * Created by Leonid Bartenev
 */

public without sharing class IntegrationPatientReferralTriggerHandler {
    
    private static final List<String> SS_STATUSES_ACCEPT_REFERRALS = new List<String>{
            StudySiteService.PI_S_ACCEPTED,
            StudySiteService.PI_S_ACCEPTED_A,
            StudySiteService.PI_S_INVITATION_SENT
    };
    
    public class CheckRequiredFieldsAndUpsertParticipantAndPEHandler extends TriggerHandler {
        
        public override void beforeInsert(List<SObject> newList) {
            setNewList(newList);
            checkFields();
            upsertParticipantAndPE();
        }
        
        private Map<String, Study_Site__c> ssByPrimaryKeyEPRMap = new Map<String, Study_Site__c>();
        private Map<String, Clinical_Trial_Profile__c> ctpByProtocolIdMap = new Map<String, Clinical_Trial_Profile__c>();
        private List<Integration_Patient_Referral__c> newList;
        private Map<String, Integration_Patient_Referral__c> newMap = new Map<String, Integration_Patient_Referral__c>();
    
    
        private void setNewList(List<Integration_Patient_Referral__c> newList){
            this.newList = newList;
            List<String> protocolIds = new List<String>();
            List<String> ssNumbersList = new List<String>();
            for (Integration_Patient_Referral__c ipr : newList) {
                protocolIds.add(ipr.protocolId__c);
                ssNumbersList.add(getSitePrimaryKeyEPR(ipr));
                newMap.put(ipr.referralID__c, ipr);
            }
            //SS Map
            List<Study_Site__c> ssList = [
                    SELECT Id, Protocol_ID__c, Primary_Key_ePR__c,
                            Override_PI_Referral_Status__c
                    FROM Study_Site__c
                    WHERE Primary_Key_ePR__c IN: ssNumbersList
            ];
            for (Study_Site__c ss : ssList) ssByPrimaryKeyEPRMap.put(ss.Primary_Key_ePR__c, ss);
    
            //CTP Map
            List<Clinical_Trial_Profile__c> ctpList = [
                    SELECT Id, Override_Recruitment_Status__c, Protocol_ID__c
                    FROM Clinical_Trial_Profile__c
                    WHERE Protocol_ID__c IN: protocolIds
            ];
            for (Clinical_Trial_Profile__c ctp : ctpList) ctpByProtocolIdMap.put(ctp.Protocol_ID__c, ctp);
        }
    
        private void checkFields() {
            //process items:
            for (Integration_Patient_Referral__c ipr : newList) {
                List<String> errorsLog = new List<String>();
                //Required fields check:
                if (String.isEmpty(ipr.siteSelected__c)) errorsLog.add('Required field is missing: siteSelected;');
                if (String.isEmpty(ipr.protocolId__c)) errorsLog.add('Required field is missing: protocolId;');
                if (String.isEmpty(ipr.firstName__c)) errorsLog.add('Required field is missing: firstName__c;');
                if (String.isEmpty(ipr.lastName__c)) errorsLog.add('Required field is missing: lastName__c;');
                if (String.isEmpty(ipr.email__c) &&
                        String.isEmpty(ipr.phone__c)) errorsLog.add('Either email or phone number must be provided;');
            
                //Check SS
                String studySiteNumber = getSitePrimaryKeyEPR(ipr);
                Study_Site__c ss = ssByPrimaryKeyEPRMap.get(studySiteNumber);
                if (ss == null) {
                    errorsLog.add('Study Site: ' + studySiteNumber + ' not found;');
                } else if (!SS_STATUSES_ACCEPT_REFERRALS.contains(ss.Override_PI_Referral_Status__c)) {
                    errorsLog.add('StudySite is not accepting referrals;');
                }
            
                //Check CTP
                Clinical_Trial_Profile__c ctp = ctpByProtocolIdMap.get(ipr.protocolId__c);
                if (ctp == null) {
                    errorsLog.add('Study: ' + ipr.protocolId__c + ' not found;');
                } else if (ctp.Override_Recruitment_Status__c != TrialService.STATUS_ACTIVELY_ENROLLING) {
                    errorsLog.add('Study is not accepting referrals;');
                }
                if (errorsLog.size() > 0) ipr.addError(String.join(errorsLog, '\n'));
            }
        }
    
        private void upsertParticipantAndPE() {
            Map<String, Participant__c> newParticipantsMap = new Map<String, Participant__c>();
            for (Integration_Patient_Referral__c ipr : newList) newParticipantsMap.put(ipr.referralID__c, convertToParticipant(ipr));
        
            //Duplicates check and upsert participant
            ParticipantDuplicateService duplicateService = new ParticipantDuplicateService(newParticipantsMap.values());
            for (Integration_Patient_Referral__c ipr : newList) {
                Participant__c participant = newParticipantsMap.get(ipr.referralID__c);
                Participant__c participantDuplicate = duplicateService.findDuplicate(participant);
                if (participantDuplicate != null) {
                    String refSourceStr = participantDuplicate.Secondary_Source__c;
                    if(refSourceStr == null) refSourceStr = '';
                    Set<String> refSources = new Set<String>(refSourceStr.split(';'));
                    refSources.add(ipr.Data_Source__c);
                    participantDuplicate.Secondary_Source__c = String.join(new List<String>(refSources), ';');
                    newParticipantsMap.put(ipr.referralID__c, participantDuplicate);
                }else{
                    Contact contactDuplicate = duplicateService.findDuplicateContact(participant);
                    if(contactDuplicate != null) participant.Contact__c = contactDuplicate.Id;
                    newParticipantsMap.put(ipr.referralID__c, participant);
                }
            }
            upsert newParticipantsMap.values();
        
            //Insert PE
            List<Participant_Enrollment__c> peList = new List<Participant_Enrollment__c>();
            for (Integration_Patient_Referral__c ipr : newList) {
                Participant__c participant = newParticipantsMap.get(ipr.referralID__c);
                Study_Site__c ss = ssByPrimaryKeyEPRMap.get(getSitePrimaryKeyEPR(ipr));
                if(ss != null) peList.add(createPE(ipr, participant.Id, ss.Id));
            }
            List<Database.SaveResult> saveResults = Database.insert(peList, false);
            for (Integer i = 0; i < saveResults.size(); i++) {
                Participant_Enrollment__c pe = peList[i];
                Database.SaveResult sr = saveResults[i];
                Integration_Patient_Referral__c ipr = newMap.get(pe.Referral_ID__c);
                if (ipr != null) {
                    if (sr.isSuccess()) {
                        ipr.Success__c = true;
                        ipr.Participant_Enrollment__c = sr.getId();
                    } else {
                        ipr.Success__c = false;
                        ipr.Error_Message__C = 'Participant Enrollment Duplicate Error';
                    }
                }
            }
        }
    }

    private static Participant__c convertToParticipant(Integration_Patient_Referral__c ipr) {
        return new Participant__c(
                First_Name__c = ipr.firstName__c,
                Middle_Name__c = ipr.Middle_Initial__c,
                Last_Name__c = ipr.lastName__c,
                Email__c = ipr.email__c,
                Phone__c = ipr.phone__c,
                Phone_Type__c = ipr.Phone_Type__c,
                Date_of_Birth__c = ipr.BirthDate__c,
                Birth_Year__c = ipr.birthYear__c,
                Mailing_Country_Code__c = ipr.Address_Country__c,
                Mailing_State__c = ipr.Address_State__c,
                Mailing_City__c = ipr.Address_City__c,
                Mailing_Zip_Postal_Code__c = ipr.Address_ZipCode__c,
                Mailing_Street__c = ipr.Address_AddressLine1__c,
                Gender__c = ipr.sex__c,
                Secondary_Source__c = ipr.Data_Source__c
        );
    }
    
    private static Participant_Enrollment__c createPE(Integration_Patient_Referral__c ipr, Id participantId, Id ssId) {
        return new Participant_Enrollment__c(
                Participant__c = participantId,
                Study_Site__c = ssId,
                Pre_Eligibility__c = ipr.Pass_Fail__c,
                Referral_Source__c = ipr.Data_Source__c,
                Participant_ID_randomized_ID__c = ipr.ePRPatient_ID_Number__c,
                Referral_ID__c = ipr.referralID__c,
                Participant_Status__c = ParticipantEnrollmentService.PART_STATUS_REFERRAL_SENT_TO_PI,
                Terms_and_Conditions_Accepted_Date__c = ipr.acceptedTermsAndConditions__c != null ? Date.valueOf(ipr.acceptedTermsAndConditions__c) : null,
                Referred_Date__c = ipr.Referred_Date__c != null ? Date.valueOf(ipr.Referred_Date__c) : null,
                Referred_By__c = 'Other'
        );
    }
    
    private static String getSitePrimaryKeyEPR(Integration_Patient_Referral__c ipr){
        return ipr.protocolId__c + '_' + ipr.siteSelected__c;
    }
}