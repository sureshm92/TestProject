/**
 * This is the main controller class for PI Revamp
 */
public without sharing class PIR_HomepageController {
  public static boolean allowSH;
  public class ListViewWrapper implements Comparable {
    @AuraEnabled
    public string firstName;
    @AuraEnabled
    public string lastName;
    @AuraEnabled
    public string refId;
    @AuraEnabled
    public string studyName;
    @AuraEnabled
    public string siteName;
    @AuraEnabled
    public string participantPhone;
    @AuraEnabled
    public string source;
    @AuraEnabled
    public Boolean highPriority;
    @AuraEnabled
    public Boolean highRisk;
    @AuraEnabled
    public Boolean actionReq;
    @AuraEnabled
    public Id id;
    @AuraEnabled
    public Id siteId;
    @AuraEnabled
    public Id studyId;
    @AuraEnabled
    public Decimal perCounter;
    @AuraEnabled
    public String participantId;
    @AuraEnabled
    public string status;
    @AuraEnabled
    public boolean promotetoSH;
    @AuraEnabled
    public boolean adult;
    @AuraEnabled
    public String email;
    @AuraEnabled
    public String commTemplate;
    @AuraEnabled
    public Boolean clinicalParticipantEmail;
    @AuraEnabled
    public Boolean studySiteParticipantEmail;
    @AuraEnabled
    public Boolean patientUser;
    @AuraEnabled
    public Datetime invitetoPPDate;
    @AuraEnabled
    public Boolean clinicalPPEnable;
    @AuraEnabled
    public Boolean notEligibleEmail;
    @AuraEnabled
    public Boolean permitInfo;
    @AuraEnabled
    public string studysiteType;
    @AuraEnabled
    public boolean isAllowedForSH;
    @AuraEnabled
    public Participant_Enrollment__c per;
    // Implement the compareTo() method
    public Integer compareTo(Object compareTo) {
      ListViewWrapper compareToP = (ListViewWrapper) compareTo;
      if (firstName == compareToP.firstName) {
        if (lastName == compareToP.lastName)
          return 0 * sortOrder;
        if (lastName > compareToP.lastName)
          return 1 * sortOrder;
        return -1 * sortOrder;
      } else if (firstName > compareToP.firstName)
        return 1 * sortOrder;
      return -1 * sortOrder;
    }
  }
  public static integer sortOrder = 1;

  public class ListViewReturnWrapper {
    @AuraEnabled
    public Integer totalRecordCount;
    @AuraEnabled
    public List<ListViewWrapper> listViewWrapper;
    @AuraEnabled
    public List<Id> studyIdlist;
    @AuraEnabled
    public List<Id> siteIdlist;
    @AuraEnabled
    public Boolean isEnablePP;
    @AuraEnabled
    public Boolean sortInitialVisit;
    @AuraEnabled
    public PresetWrapper filterWrapper;
  }

  public class PeGetInviteWrapper {
    @AuraEnabled
    public Participant_Enrollment__c per;
    @AuraEnabled
    public Boolean isAllowedForSH;
    @AuraEnabled
    public Datetime sendToSHDate;
    @AuraEnabled
    public Boolean preScreenAccess;
  }

  public class PresetWrapper {
    @AuraEnabled
    public String activeInactive;
    @AuraEnabled
    public List<String> studyList;
    @AuraEnabled
    public List<String> siteList;
    @AuraEnabled
    public List<String> status;
    @AuraEnabled
    public List<String> source;
    @AuraEnabled
    public String ageTo;
    @AuraEnabled
    public String ageFrom;
    @AuraEnabled
    public List<String> ethnicityList;
    @AuraEnabled
    public String sex;
    @AuraEnabled
    public String highRisk;
    @AuraEnabled
    public Boolean highPriority;
    @AuraEnabled
    public String comorbidities;
    @AuraEnabled
    public String initialVisit;
    @AuraEnabled
    public String initialVisitStartDate;
    @AuraEnabled
    public String initialVisitEndDate;
    @AuraEnabled
    public String presetId;
    @AuraEnabled
    public String presetName;
    @AuraEnabled
    public Boolean isDefault;
  }

  @AuraEnabled
  public static ListViewReturnWrapper getListViewData(
    Integer pageNumber,
    Integer totalCount,
    String sponsorName,
    String filterWrapper,
    Boolean isPPFiltered,
    String searchString,
    String sortOn,
    Integer sortType
  ) {
    try {
      ListViewReturnWrapper listViewReturnWrapper = new ListViewReturnWrapper();
      List<String> studyIdlist = new List<String>();
      List<String> siteIdlist = new List<String>();
      List<String> selectedStatusList = new List<String>();
      List<String> sourceTypeList = new List<String>();
      List<String> ethnicityList = new List<String>();
      String ageStart;
      String ageEnd;
      String sexAtBirth;
      String highRisk;
      Boolean highPriority = false;
      String comorbidities;
      Boolean ivScheduled;
      String ivStartDate;
      String ivEndDate;

      System.debug('filterWrapper: ' + filterWrapper);
      if (filterWrapper != null) {
        PresetWrapper response = (PresetWrapper) JSON.deserialize(
          filterWrapper,
          PresetWrapper.class
        );
        listViewReturnWrapper.filterWrapper = response;
        studyIdlist = response.studyList;
        siteIdlist = response.siteList;
        selectedStatusList = response.status;
        sourceTypeList = response.source;
        ethnicityList = response.ethnicityList;
        ageStart = response.ageTo;
        ageEnd = response.ageFrom;
        sexAtBirth = response.sex;
        highRisk = (response.highRisk == 'true' ? 'Yes' : '');
        highPriority = response.highPriority;
        comorbidities = (response.comorbidities == 'true' ? 'Yes' : '');
        if (response.initialVisit == 'Initial Visit Scheduled') {
          ivScheduled = true;
          if (!String.isBlank(response.initialVisitStartDate)) {
            ivStartDate = response.initialVisitStartDate;
          }
          if (!String.isBlank(response.initialVisitEndDate)) {
            ivEndDate = response.initialVisitEndDate;
          }
        } else if (response.initialVisit == 'Initial Visit Not Scheduled') {
          ivScheduled = false;
        }
      }

      searchString = searchString.trim();
      String qCountString = 'SELECT COUNT() FROM Participant_Enrollment__c WHERE ';
      String queryString =
        'SELECT ' +
        'Id,' +
        'Name,' +
        'Participant__r.First_Name__c,' +
        'Participant__r.Last_Name__c,' +
        'Participant__r.Phone__c,' +
        'Clinical_Trial_Profile__r.Study_Code_Name__c,' +
        'Clinical_Trial_Profile__r.Promote_to_SH__c,' +
        'Study_Site__c,' +
        'Study_Site__r.name,' +
        'Study_Site__r.Study_Site_Type__c,' +
        'Clinical_Trial_Profile__c,' +
        'Referral_Source__c,' +
        'HighRisk_Indicator__c,' +
        'High_Priority__c,' +
        'PerCounter__c,' +
        'Participant__c,' +
        'Participant__r.Adult__c,' +
        'Participant__r.Email__c,' +
        'Clinical_Trial_Profile__r.CommunityTemplate__c,' +
        'Study_Site__r.Clinical_Trial_Profile__r.Suppress_Participant_Emails__c,' +
        'Study_Site__r.Suppress_Participant_Emails__c,' +
        'Clinical_Trial_Profile__r.Patient_Portal_Enabled__c,' +
        'Clinical_Trial_Profile__r.Suppress_Participant_Emails__c,' +
        'Participant_Contact__r.Is_Patient_User_Created__c,' +
        'Invited_To_PP_Date__c,' +
        'Study_Site__r.Clinical_Trial_Profile__r.Patient_Portal_Enabled__c,' +
        'Participant__r.IsCountry_NOT_Eligible_for_Emails__c,' +
        'Permit_IQVIA_to_contact_about_study__c,' +
        'Participant__r.Emancipation_in_progress__c,' +
        'Participant_Status__c,' +
        'HCP__c,' +
        'HCP__r.HCP_Contact__r.Name,' +
        'PI_Contact__c,' +
        'PI_Contact__r.Name,' +
        'Source_Type__c,' +
        'Study_Hub_Log__c,' +
        'Study_Hub_Log__r.Response_Status_Code__c,' +
        '(' +
        '  SELECT Id, Date__c, Non_Enrollment_Reason__c ' +
        '  FROM Participant_Enrollment_Status_History__r' +
        '  WHERE Status__c = \'Eligibility Passed\'' +
        '  ORDER BY CreatedDate DESC' +
        '  LIMIT 1' +
        ' )' +
        'FROM Participant_Enrollment__c WHERE ';
      String janssenLabel = system.Label.Janssen_Community_Template_Name;
      String filterStringPP =
        ' AND (Participant_Contact__r.Is_Patient_User_Created__c = FALSE OR Invited_To_PP_Date__c =NULL) AND Participant__r.Email__c!=NULL AND Participant__r.Adult__c = TRUE AND Study_Site__r.Study_Site_Type__c !=\'Virtual\' AND Study_Site__r.Study_Site_Type__c !=\'Hybrid\' AND Participant__r.IsCountry_NOT_Eligible_for_Emails__c = FALSE AND Permit_IQVIA_to_contact_about_study__c = TRUE' +
        ' AND Clinical_Trial_Profile__r.CommunityTemplate__c !=: janssenLabel' +
        ' AND Study_Site__r.Suppress_Participant_Emails__c = FALSE AND Clinical_Trial_Profile__r.Suppress_Participant_Emails__c = FALSE AND Clinical_Trial_Profile__r.Patient_Portal_Enabled__c = TRUE';

      if (String.isNotBlank(searchString)) {
        return getSearchRecords(
          sponsorName,
          queryString,
          searchString,
          filterStringPP,
          pageNumber,
          studyIdlist,
          siteIdlist,
          sortOn,
          sortType,
          filterWrapper
        );
      }

      String filterString =
        ' Study_Site__c IN :siteIdlist' +
        ' AND Participant_Status__c IN :status';

      //For Source
      if (sourceTypeList != null && !sourceTypeList.isEmpty()) {
        filterString =
          filterString + ' AND Source_Type__c IN: sourceTypeList  ';
      }

      //For Age
      if (!String.isBlank(ageStart)) {
        filterString =
          filterString +
          ' AND Participant__r.Present_Age__c >=  ' +
          ageStart +
          ' ';
      }

      if (!String.isBlank(ageEnd)) {
        filterString =
          filterString +
          ' AND Participant__r.Present_Age__c <=  ' +
          ageEnd +
          ' ';
      }

      //For ethnicity

      if (ethnicityList != null && !ethnicityList.isEmpty()) {
        filterString = filterString + ' AND ( ';
        String etString = '  ';
        for (Integer j = 0; j < ethnicityList.size(); j++) {
          etString =
            etString +
            ' Participant__r.Ethnicity__c INCLUDES (\'' +
            ethnicityList[j] +
            '\') ';
          if (j != ethnicityList.size() - 1) {
            etString = etString + ' OR ';
          }
        }
        filterString = filterString + etString + ' )';
      }

      //Sex at Birth
      if (!String.isBlank(sexAtBirth)) {
        filterString =
          filterString +
          ' AND Participant__r.Gender_Technical__c = : sexAtBirth ';
      }

      //For High Risk
      if (!String.isBlank(highRisk)) {
        filterString =
          filterString + ' AND HighRisk_Indicator__c = : highRisk ';
      }
      //For High Priority
      if (highPriority != null && highPriority) {
        filterString = filterString + ' AND High_Priority__c = : highPriority ';
      }

      //For High comorbidities
      if (!String.isBlank(comorbidities)) {
        filterString =
          filterString + ' AND Comorbidities__c = : comorbidities ';
      }

      //For Initial Visit
      if (ivScheduled != null) {
        filterString =
          filterString +
          ' AND Initial_visit_scheduled_flag__c = : ivScheduled ';
      }

      //For Initial Visit Date range
      if (ivStartDate != null) {
        filterString =
          filterString +
          ' AND Initial_visit_scheduled_date__c >=  ' +
          ivStartDate +
          ' ';
      }

      if (ivEndDate != null) {
        filterString =
          filterString +
          ' AND Initial_visit_scheduled_date__c <=   ' +
          ivEndDate +
          ' ';
      }

      List<String> status = selectedStatusList;
      System.debug('totalCount: ' + totalCount);
      System.debug('studyIdlist: ' + studyIdlist);
      System.debug('siteIdlist: ' + siteIdlist);
      System.debug('selectedStatusList: ' + selectedStatusList);
      System.debug('status: ' + status);
      if (status == null || status.isEmpty()) {
        status = new List<String>();
        status.add('Received');
      }
      string sortCountQry = '';
      if (sortOn.contains('AND')) {
        sortCountQry = sortOn.split('order by')[0];
      }
      if (totalCount == -1) {
        if (
          (studyIdlist == null || studyIdlist.isEmpty()) &&
          (siteIdlist == null || siteIdlist.isEmpty()) &&
          (String.isBlank(searchString))
        ) {
          studyIdlist = new List<String>();
          siteIdlist = new List<String>();
          string janssen = CommunityTemplateService.TEMPLATE_JANSSEN;
          List<Study_Site__c> studySiteList = getStudySite();
          for (Study_Site__c s : studySiteList) {
            if (sponsorName == janssen) {
              if (
                s.Clinical_Trial_Profile__r.CommunityTemplate__c == sponsorName
              ) {
                studyIdlist.add(s.Clinical_Trial_Profile__c);
                siteIdlist.add(s.Id);
                break;
              }
            } else {
              if (s.Clinical_Trial_Profile__r.CommunityTemplate__c != janssen) {
                studyIdlist.add(s.Clinical_Trial_Profile__c);
                siteIdlist.add(s.Id);
                break;
              }
            }
          }
        } else if (
          (studyIdlist != null || !studyIdlist.isEmpty()) &&
          (siteIdlist == null || siteIdlist.isEmpty())
        ) {
          //get the study site id's for selected study
          siteIdlist = getStudySiteForaStudy(studyIdlist);
        } else if (
          (studyIdlist == null || studyIdlist.isEmpty()) &&
          (siteIdlist == null || siteIdlist.isEmpty()) &&
          (String.isNotBlank(searchString))
        ) {
          studyIdlist = new List<String>();
          siteIdlist = new List<String>();
          string janssen = CommunityTemplateService.TEMPLATE_JANSSEN;
          List<Study_Site__c> studySiteList = getStudySite();
          for (Study_Site__c s : studySiteList) {
            if (sponsorName == janssen) {
              if (
                s.Clinical_Trial_Profile__r.CommunityTemplate__c == sponsorName
              ) {
                studyIdlist.add(s.Clinical_Trial_Profile__c);
                siteIdlist.add(s.Id);
              }
            } else {
              if (s.Clinical_Trial_Profile__r.CommunityTemplate__c != janssen) {
                studyIdlist.add(s.Clinical_Trial_Profile__c);
                siteIdlist.add(s.Id);
              }
            }
          }
        }

        System.debug('searchString: ' + searchString);

        String qcString = qCountString;
        if (isPPFiltered == true) {
          qcString = qcString + filterString + filterStringPP + sortCountQry;
        } else {
          qcString = qcString + filterString + sortCountQry;
        }

        System.debug('qCountString: ' + qcString);
        System.debug('status: ' + status);
        System.debug('studyIdlist: ' + studyIdlist);
        System.debug('siteIdlist: ' + siteIdlist);
        totalCount = Database.countQuery(qcString);
      }

      qCountString =
        qCountString +
        filterString +
        filterStringPP +
        sortCountQry;
      System.debug('qCountString: ' + qCountString);
      System.debug('status: ' + status);
      Integer totalCountPP = Database.countQuery(qCountString);

      List<ListViewWrapper> listViewWrapper = new List<ListViewWrapper>();

      if (pageNumber > 200 & pageNumber <= 4500) {
        // listViewWrapper = createListViewWrapper(
        //   getAdditionalPages(
        //     pageNumber,
        //     totalCount,
        //     studyIdlist,
        //     siteIdlist,
        //     isPPFiltered
        //   )
        // );
        //for pages more than 200 starts
        // Integer offsetLimit = (pageNumber - 1) * 10;
        Integer limitOfRecords = (pageNumber * 10);
        List<Participant_Enrollment__c> perList = new List<Participant_Enrollment__c>();
        String orderByString = sortOn + ' LIMIT :limitOfRecords ';
        //TODO: consider changing this once filter is one.
        if (isPPFiltered == true) {
          queryString =
            queryString +
            filterString +
            filterStringPP +
            orderByString;
        } else {
          queryString = queryString + filterString + orderByString;
        }

        System.debug('studyIdlist: ' + studyIdlist);
        System.debug('siteIdlist: ' + siteIdlist);
        System.debug('status: ' + status);
        System.debug('sourceTypeList: ' + sourceTypeList);
        System.debug('ageStart: ' + ageStart);
        System.debug('ageEnd: ' + ageEnd);
        System.debug('queryString: ' + queryString);

        perList = Database.query(queryString);
        List<Participant_Enrollment__c> perLimitList = new List<Participant_Enrollment__c>();
        for (Integer i = (limitOfRecords - 10); i < perList.size(); i++) {
          perLimitList.add(perList[i]);
        }
        listViewWrapper = createListViewWrapper(perLimitList);
        //for pages more than 200 ends
      } else {
        Integer offsetLimit = (pageNumber - 1) * 10;
        List<Participant_Enrollment__c> perList = new List<Participant_Enrollment__c>();
        String orderByString =
          //' ORDER BY PerCounter__c DESC' +
          sortOn +
          ' LIMIT 10 ' +
          ' OFFSET :offsetLimit ';
        //TODO: consider changing this once filter is one.
        if (isPPFiltered == true) {
          queryString =
            queryString +
            filterString +
            filterStringPP +
            orderByString;
        } else {
          queryString = queryString + filterString + orderByString;
        }

        System.debug('studyIdlist: ' + studyIdlist);
        System.debug('siteIdlist: ' + siteIdlist);
        System.debug('status: ' + status);
        System.debug('sourceTypeList: ' + sourceTypeList);
        System.debug('ageStart: ' + ageStart);
        System.debug('ageEnd: ' + ageEnd);
        System.debug('queryString: ' + queryString);

        perList = Database.query(queryString);
        listViewWrapper = createListViewWrapper(perList);
      }
      if (totalCountPP == 0) {
        listViewReturnWrapper.isEnablePP = false;
      } else {
        listViewReturnWrapper.isEnablePP = true;
      }
      listViewReturnWrapper.listViewWrapper = listViewWrapper;
      listViewReturnWrapper.totalRecordCount = totalCount;
      listViewReturnWrapper.studyIdlist = studyIdlist;
      listViewReturnWrapper.siteIdlist = siteIdlist;
      System.debug('listViewReturnWrapper: ' + listViewReturnWrapper);
      //TODO: this query can be avoided.
      Integer ivStudies = [
        SELECT COUNT()
        FROM Clinical_Trial_Profile__c
        WHERE Initial_Visit_Required__c = TRUE AND id IN :studyIdlist
      ];
      listViewReturnWrapper.sortInitialVisit = (ivStudies != 0);
      if (sortType != 0) {
        sortOrder = sortType;
        listViewReturnWrapper.listViewWrapper.sort();
      }
      return listViewReturnWrapper;
    } catch (Exception e) {
      System.debug('e.getMessage(): ' + e.getMessage());
      System.debug('e.getStackTraceString(): ' + e.getStackTraceString());
      throw new AuraHandledException(
        e.getMessage() +
        ' ' +
        e.getStackTraceString()
      );
    }
  }

  public static ListViewReturnWrapper getSearchRecords(
    String sponsorName,
    String queryString,
    String searchString,
    String filterStringPP,
    Integer pageNumber,
    List<String> studyIdlistParam,
    List<String> siteIdlistParam,
    String sortOn,
    Integer sortType,
    String filterWrapper
  ) {
    List<String> studyIdlist = new List<String>();
    List<String> siteIdlist = new List<String>();
    string janssen = CommunityTemplateService.TEMPLATE_JANSSEN;
    String janssenLabel = system.Label.Janssen_Community_Template_Name;
    List<Study_Site__c> studySiteList = getStudySite();
    for (Study_Site__c s : studySiteList) {
      if (sponsorName == janssen) {
        if (s.Clinical_Trial_Profile__r.CommunityTemplate__c == sponsorName) {
          studyIdlist.add(s.Clinical_Trial_Profile__c);
          siteIdlist.add(s.Id);
        }
      } else {
        if (s.Clinical_Trial_Profile__r.CommunityTemplate__c != janssen) {
          studyIdlist.add(s.Clinical_Trial_Profile__c);
          siteIdlist.add(s.Id);
        }
      }
    }

    String filterString = ' Study_Site__c IN :siteIdlist ';
    queryString = queryString + filterString + sortOn;

    List<Participant_Enrollment__c> peList = Database.query(queryString);

    List<String> lstFieldSearch = new List<String>{
      'Participant__r.First_Name__c',
      'Participant__r.Last_Name__c',
      'Name'
    };

    Boolean isEnablePPlocal = false;

    List<Participant_Enrollment__c> filteredPEList = new List<Participant_Enrollment__c>();
    //Filter by search string:

    for (Participant_Enrollment__c pe : peList) {
      if (!isEnablePPlocal) {
        if (
          (pe.Participant_Contact__r.Is_Patient_User_Created__c == false ||
          pe.Invited_To_PP_Date__c == null) &&
          pe.Participant__r.Email__c != null &&
          pe.Participant__r.Adult__c == true &&
          pe.Study_Site__r.Study_Site_Type__c != 'Virtual' &&
          pe.Study_Site__r.Study_Site_Type__c != 'Hybrid' &&
          pe.Participant__r.IsCountry_NOT_Eligible_for_Emails__c == false &&
          pe.Permit_IQVIA_to_contact_about_study__c == true &&
          pe.Clinical_Trial_Profile__r.CommunityTemplate__c != 'Janssen' &&
          pe.Study_Site__r.Suppress_Participant_Emails__c == false &&
          pe.Clinical_Trial_Profile__r.Suppress_Participant_Emails__c ==
          false &&
          pe.Clinical_Trial_Profile__r.Patient_Portal_Enabled__c == true
        ) {
          isEnablePPlocal = true;
        }
      }

      Boolean isFound = false;
      for (String searchField : lstFieldSearch) {
        String searchFieldValue =
          SObjectHelper.getSObjectFieldValue(pe, searchField) + '';
        for (String searchWord : searchString.split(' ')) {
          if (searchFieldValue.containsIgnoreCase(searchWord)) {
            isFound = true;
            break;
          }
        }
      }
      if (isFound)
        filteredPEList.add(pe);
    }
    peList = filteredPEList;  
    
    List<Participant_Enrollment__c> perLimitList = new List<Participant_Enrollment__c>();
    Integer listendindex;
     
    if (filteredPEList.size() > pageNumber * 10) {
      listendindex = pageNumber * 10 - 1;
    } else {
      listendindex = filteredPEList.size() - 1;
    }
     
    
    for (Integer i = (pageNumber * 10 - 10); i <= listendindex; i++) {
      perLimitList.add(filteredPEList[i]);
    }
    List<ListViewWrapper> listViewWrapper = new List<ListViewWrapper>();
     
    listViewWrapper = createListViewWrapper(perLimitList);
     
     
    ListViewReturnWrapper listViewReturnWrapper = new ListViewReturnWrapper();

    listViewReturnWrapper.listViewWrapper = listViewWrapper;
    listViewReturnWrapper.totalRecordCount = filteredPEList.size();
    listViewReturnWrapper.studyIdlist = studyIdlistParam;
    listViewReturnWrapper.siteIdlist = siteIdlistParam;
    listViewReturnWrapper.isEnablePP = isEnablePPlocal;
    Integer ivStudies = [
      SELECT COUNT()
      FROM Clinical_Trial_Profile__c
      WHERE Initial_Visit_Required__c = TRUE AND id IN :studyIdlist
    ];
    listViewReturnWrapper.sortInitialVisit = (ivStudies != 0);
     
    if (sortType != 0) {
      sortOrder = sortType;
      listViewReturnWrapper.listViewWrapper.sort();
    }
    ListViewReturnWrapper.filterWrapper = (PresetWrapper) JSON.deserialize(filterWrapper,PresetWrapper.class);
    return ListViewReturnWrapper;
  }
  //presets
  @AuraEnabled
  public static list<presetwrapper> fetchPreset() {
    list<presetwrapper> pwList = new List<presetwrapper>();
    for (Preset_Filter__c pf : [
      SELECT
        id,
        AgeFrom__c,
        AgeTo__c,
        Commrbidity__c,
        Default_Preset__c,
        HighRisk__c,
        HighPriortiy__c,
        InitialVisit__c,
        InitialVisit_Schedule_StartDate__c,
        InitialVisit_Schedule_EndDate__c,
        Preset_Name__c,
        Sex__c,
        StudyActive__c,
        Ethnicity__c,
        Source__c,
        Status__c,
        StudyId__c,
        Study_Site_Id__c
      FROM Preset_Filter__c
      WHERE User_Preset__c = :userinfo.getUserId()
    ]) {
      presetwrapper pw = new presetwrapper();
      pw.ageFrom = pf.AgeFrom__c;
      pw.ageTo = pf.AgeTo__c;
      pw.comorbidities = pf.Commrbidity__c;
      pw.highRisk = pf.HighRisk__c;
      pw.highPriority = pf.HighPriortiy__c;
      pw.initialVisit = pf.InitialVisit__c;
      pw.initialVisitStartDate = pf.InitialVisit_Schedule_StartDate__c;
      pw.initialVisitEndDate = pf.InitialVisit_Schedule_EndDate__c;
      pw.presetName = pf.Preset_Name__c;
      pw.sex = pf.Sex__c;
      pw.activeInactive = pf.StudyActive__c;
      if (!String.isEmpty(pf.Ethnicity__c))
        pw.ethnicityList = pf.Ethnicity__c.split(';');
      pw.source = pf.Source__c.split(';');
      pw.status = pf.Status__c.split(';');
      pw.studyList = pf.StudyId__c.split(';');
      pw.siteList = pf.Study_Site_Id__c.split(';');
      pw.isDefault = pf.Default_Preset__c;
      pw.presetId = pf.id;
      pwList.add(pw);
    }

    return pwlist;
  }
  @AuraEnabled
  public static String createPreset(String strPresetwrapper) {
    presetwrapper objPresetWrapper = (presetwrapper) JSON.deserialize(
      strPresetwrapper,
      presetwrapper.class
    );

    List<Preset_Filter__c> lstPresetFilter = new List<Preset_Filter__c>();
    String strStudyId = '';
    String strSiteId = '';
    String strStatus = '';
    String strSource = '';
    String strEthnicity = '';

    String strPresetName = objPresetWrapper.presetName;
    ID currentUserId = UserInfo.getUserId();

    Integer intcount = [SELECT Count() from Preset_Filter__c where User_Preset__c =: currentUserId];
    if(intcount >= 5)
      return 'limitexced'; 
    list<Preset_Filter__c> lstExistingPreset = new List<Preset_Filter__c>();
    lstExistingPreset = [
      SELECT ID
      FROM Preset_Filter__c
      WHERE Preset_Name__c = :strPresetName AND User_Preset__c = :currentUserId
    ];
    if (!lstExistingPreset.isEmpty()) {
      return 'duplicateName';
    } 
     
    strStudyId = String.join(objPresetWrapper.studyList, ';');
    //Site id list
    
    strSiteId = String.join(objPresetWrapper.siteList, ';');
    //Status
    
    strStatus = String.join(objPresetWrapper.status, ';');
    //Source
    
    strSource = String.join(objPresetWrapper.source, ';');
    //Ethnicity
    
    strEthnicity = String.join(objPresetWrapper.ethnicityList, ';');

    Preset_Filter__c objPreset = new Preset_Filter__c();

    objPreset.AgeFrom__c = objPresetWrapper.ageFrom;
    objPreset.AgeTo__c = objPresetWrapper.ageTo;
    objPreset.Commrbidity__c = objPresetWrapper.comorbidities;
    objPreset.Ethnicity__c = strEthnicity;
    objPreset.HighRisk__c = objPresetWrapper.highRisk;
    objPreset.HighPriortiy__c = objPresetWrapper.highPriority;
    objPreset.InitialVisit__c = objPresetWrapper.initialVisit;
    objPreset.InitialVisit_Schedule_StartDate__c = objPresetWrapper.initialVisitStartDate;
    objPreset.InitialVisit_Schedule_EndDate__c = objPresetWrapper.initialVisitEndDate;
    objPreset.Preset_Name__c = objPresetWrapper.presetName;
    objPreset.Sex__c = objPresetWrapper.sex;
    objPreset.Source__c = strSource;
    objPreset.Status__c = strStatus;
    objPreset.StudyActive__c = objPresetWrapper.activeInactive;
    objPreset.StudyId__c = strStudyId;
    objPreset.Study_Site_Id__c = strSiteId;
    objPreset.User_Preset__c = currentUserId;
    objPreset.Default_Preset__c = true;
    if (String.isNotBlank(objPresetWrapper.presetId))
      objPreset.Id = objPresetWrapper.presetId;

    lstPresetFilter.add(objPreset);

    for (Preset_Filter__c objPresetExist : [
      SELECT ID, Default_Preset__c
      FROM Preset_Filter__c
      WHERE User_Preset__c = :currentUserId AND Default_Preset__c = TRUE
    ]) {
      objPresetExist.Default_Preset__c = false;
      lstPresetFilter.add(objPresetExist);
    }

    upsert lstPresetFilter;
    return 'success';
  }

  private static List<ListViewWrapper> createListViewWrapper(
    List<Participant_Enrollment__c> perList
  ) {
    List<ListViewWrapper> listViewWrapper = new List<ListViewWrapper>();
    for (Participant_Enrollment__c lst : perList) {
      ListViewWrapper wrap = new ListViewWrapper();
      wrap.firstName = lst.Participant__r.First_Name__c;
      wrap.lastName = lst.Participant__r.Last_Name__c;
      wrap.refId = lst.Name;
      wrap.studyName = lst.Clinical_Trial_Profile__r.Study_Code_Name__c;
      wrap.siteName = lst.Study_Site__r.name;
      if (lst.Participant__r.Phone__c != null) {
        wrap.participantPhone = lst.Participant__r.Phone__c;
      } else {
        List<Patient_Delegate__c> patientDelegate = new List<Patient_Delegate__c>();
        patientDelegate = [
          SELECT
            Id,
            Primary_Delegate__c,
            Contact__c,
            Contact__r.Phone,
            Participant__c
          FROM Patient_Delegate__c
          WHERE
            Participant__c = :lst.Participant__c
            AND Primary_Delegate__c = TRUE
          LIMIT 1
        ];
        if (patientDelegate != null && !patientDelegate.isEmpty()) {
          wrap.participantPhone = patientDelegate[0].Contact__r.Phone;
        } else {
          wrap.participantPhone = '';
        }
      }
      if (lst.Referral_Source__c == System.Label.RH_HCP && lst.HCP__c != null) {
        wrap.source = lst.HCP__r.HCP_Contact__r.Name;
      } else if (
        lst.Referral_Source__c == System.Label.RH_PI &&
        lst.PI_Contact__c != null
      ) {
        wrap.source = lst.PI_Contact__r.Name;
      } else {
        wrap.source = lst.Source_Type__c;
      }
      wrap.highPriority = lst.High_Priority__c;
      wrap.highRisk = (String.isNotBlank(lst.HighRisk_Indicator__c) &&
      (lst.HighRisk_Indicator__c.toLowerCase() == 'yes' ||
      lst.HighRisk_Indicator__c == '1'));
      wrap.id = lst.Id;
      wrap.siteId = lst.Study_Site__c;
      wrap.studyId = lst.Clinical_Trial_Profile__c;
      wrap.perCounter = lst.PerCounter__c;
      wrap.actionReq = lst.Participant__r.Emancipation_in_progress__c;
      wrap.status = lst.Participant_Status__c;
      wrap.participantId = lst.Participant__c;
      wrap.promotetoSH = lst.Clinical_Trial_Profile__r.Promote_to_SH__c;
      wrap.studysiteType = lst.Study_Site__r.Study_Site_Type__c;
      wrap.isAllowedForSH = ifAllowedForSH(lst, false);
      wrap.adult = lst.Participant__r.Adult__c;
      wrap.email = lst.Participant__r.Email__c;
      wrap.commTemplate = lst.Clinical_Trial_Profile__r.CommunityTemplate__c;
      wrap.clinicalParticipantEmail = lst.Study_Site__r.Clinical_Trial_Profile__r.Suppress_Participant_Emails__c;
      wrap.studySiteParticipantEmail = lst.Study_Site__r.Suppress_Participant_Emails__c;
      wrap.patientUser = lst.Participant_Contact__r.Is_Patient_User_Created__c;
      wrap.invitetoPPDate = lst.Invited_To_PP_Date__c;
      wrap.clinicalPPEnable = lst.Study_Site__r.Clinical_Trial_Profile__r.Patient_Portal_Enabled__c;
      wrap.notEligibleEmail = lst.Participant__r.IsCountry_NOT_Eligible_for_Emails__c;
      wrap.permitInfo = lst.Permit_IQVIA_to_contact_about_study__c;

      listViewWrapper.add(wrap);
    }

    return listViewWrapper;
  }

  private static List<Participant_Enrollment__c> getAdditionalPages(
    Integer pageNumber,
    Integer totalCount,
    List<Id> studyIdlist,
    List<Id> siteIdlist,
    Boolean isPPFiltered
  ) {
    Integer limitOfRecords = (pageNumber * 10);
    List<String> status = new List<String>();
    status.add('Received');
    status.add('Pre-review Passed');
    status.add('In Wash Out Period');
    status.add('Successfully Contacted');
    status.add('Contact Attempted');
    status.add('Eligibility Passed');
    status.add('Screening Passed');
    status.add('Screening In Progress');
    status.add('Screening Passed');
    status.add('Screening In Progress - Wash Out Period');
    status.add('Ready to Screen');
    status.add('Enrollment Success');
    status.add('Randomization Success');
    status.add('Pre-review Failed');
    status.add('Unable to Reach');
    status.add('Contacted - Not Suitable');
    status.add('Eligibility Failed');
    status.add('Declined Consent');
    status.add('Unable to Screen');
    status.add('Withdrew Consent');
    status.add('Withdrew Consent After Screening');
    status.add('Enrollment Failed');
    status.add('Randomization Failed');
    status.add('Declined Final Consent');

    List<Participant_Enrollment__c> perList = new List<Participant_Enrollment__c>();
    if (isPPFiltered == true) {
      perList = [
        SELECT
          Id,
          Name,
          Participant__r.First_Name__c,
          Participant__r.Last_Name__c,
          Participant__r.Phone__c,
          Clinical_Trial_Profile__r.Study_Code_Name__c,
          Study_Site__c,
          Study_Site__r.name,
          Clinical_Trial_Profile__c,
          Referral_Source__c,
          HighRisk_Indicator__c,
          High_Priority__c,
          PerCounter__c,
          Participant__c,
          Participant__r.Emancipation_in_progress__c,
          Participant_Status__c,
          HCP__c,
          HCP__r.HCP_Contact__r.Name,
          PI_Contact__c,
          PI_Contact__r.Name,
          Source_Type__c
        FROM Participant_Enrollment__c
        WHERE
          Study_Site__c IN :siteIdlist
          AND Participant_Status__c IN :status
          AND (Participant_Contact__r.Is_Patient_User_Created__c = FALSE
          OR Invited_To_PP_Date__c = NULL)
          AND Participant__r.Email__c != NULL
          AND Participant__r.Adult__c = TRUE
          AND Study_Site__r.Study_Site_Type__c != 'Virtual'
          AND Study_Site__r.Study_Site_Type__c != 'Hybrid'
          AND Participant__r.IsCountry_NOT_Eligible_for_Emails__c = FALSE
          AND Permit_IQVIA_to_contact_about_study__c = TRUE
          AND Clinical_Trial_Profile__r.CommunityTemplate__c != :system.Label.Janssen_Community_Template_Name
          AND Study_Site__r.Suppress_Participant_Emails__c = FALSE
          AND Clinical_Trial_Profile__r.Suppress_Participant_Emails__c = FALSE
          AND Clinical_Trial_Profile__r.Patient_Portal_Enabled__c = TRUE
        ORDER BY PerCounter__c DESC
        LIMIT :limitOfRecords
      ];
    } else {
      perList = [
        SELECT
          Id,
          Name,
          Participant__r.First_Name__c,
          Participant__r.Last_Name__c,
          Participant__r.Phone__c,
          Clinical_Trial_Profile__r.Study_Code_Name__c,
          Study_Site__c,
          Study_Site__r.name,
          Clinical_Trial_Profile__c,
          Referral_Source__c,
          HighRisk_Indicator__c,
          High_Priority__c,
          PerCounter__c,
          Participant__c,
          Participant__r.Emancipation_in_progress__c,
          Participant_Status__c,
          HCP__c,
          HCP__r.HCP_Contact__r.Name,
          PI_Contact__c,
          PI_Contact__r.Name,
          Source_Type__c
        FROM Participant_Enrollment__c
        WHERE Study_Site__c IN :siteIdlist AND Participant_Status__c IN :status
        ORDER BY PerCounter__c DESC
        LIMIT :limitOfRecords
      ];
    }

    List<Participant_Enrollment__c> perLimitList = new List<Participant_Enrollment__c>();
    for (Integer i = (limitOfRecords - 10); i < perList.size(); i++) {
      perLimitList.add(perList[i]);
    }

    return perLimitList;
  }

  @AuraEnabled
  public static List<Study_Site__c> getStudySite() {
    Id piContactId = CommunityService.getUserContact().Id;
    List<Study_Site__c> studySiteList = [
      SELECT
        Id,
        Name,
        Site__c,
        Override_PI_Referral_Status__c,
        Site__r.Name,
        Clinical_Trial_Profile__c,
        Clinical_Trial_Profile__r.Study_Code_Name__c,
        Clinical_Trial_Profile__r.CommunityTemplate__c,
        Principal_Investigator__c
      FROM Study_Site__c
      WHERE
        Principal_Investigator__c = :piContactId
        OR ID IN :DelegateService.getDelegatedStudySiteIds()
    ];

    return studySiteList;
  }

  public static List<String> getStudySiteForaStudy(List<String> studyIdlist) {
    List<String> siteIdList = new List<String>();
    Id piContactId = CommunityService.getUserContact().Id;
    List<Study_Site__c> studySiteList = [
      SELECT Id
      FROM Study_Site__c
      WHERE
        (Principal_Investigator__c = :piContactId
        OR ID IN :DelegateService.getDelegatedStudySiteIds())
        AND Clinical_Trial_Profile__c IN :studyIdlist
    ];

    for (Study_Site__c ss : studySiteList) {
      siteIdList.add(ss.Id);
    }

    return siteIdList;
  }

  @AuraEnabled
  public static PeGetInviteWrapper getPEData(String peId) {
    try {
      Participant_Enrollment__c pe = [
        SELECT
          Id,
          Participant__c,
          Participant__r.Adult__c,
          Participant__r.Email__c,
          Study_Site__r.Study_Site_Type__c,
          Participant__r.IsCountry_NOT_Eligible_for_Emails__c,
          Permit_IQVIA_to_contact_about_study__c,
          Clinical_Trial_Profile__c,
          Clinical_Trial_Profile__r.Promote_to_SH__c,
          Study_Site__r.Clinical_Trial_Profile__r.Suppress_Participant_Emails__c,
          Participant_Status__c,
          Study_Site__r.Suppress_Participant_Emails__c,
          Study_Site__r.Clinical_Trial_Profile__r.Patient_Portal_Enabled__c,
          Study_Hub_Log__c,
          Study_Hub_Log__r.Response_Status_Code__c,
          Participant_Contact__c,
          Participant_Contact__r.Is_Patient_User_Created__c,
          Invited_To_PP_Date__c,
          MRR_Survey_Results_URL__c,
          Clinical_Trial_Profile__r.Link_to_Medical_Record_Review__c,
          Clinical_Trial_Profile__r.CommunityTemplate__c,
          Participant__r.Full_Name__c,
          (
            SELECT Id, Date__c, Non_Enrollment_Reason__c
            FROM Participant_Enrollment_Status_History__r
            WHERE Status__c = 'Eligibility Passed'
            ORDER BY CreatedDate DESC
            LIMIT 1
          )
        FROM Participant_Enrollment__c
        WHERE Id = :peId
        // WITH SECURITY_ENFORCED
      ];
      List<Site_Staff__c> piStaffs = new List<Site_Staff__c>();
      piStaffs = [
        SELECT
          Id,
          Study_Site__c,
          Study_Site__r.Principal_Investigator__c,
          Study_Site__r.Clinical_Trial_Profile__c,
          Delegate_Level__c,
          Clinical_Trial_Profile__c,
          Site_Contact__c,
          is_Invited__c
        FROM Site_Staff__c
        WHERE
          Site_Contact__c = :CommunityService.getUserContact().Id
          AND Study_Site__c = :pe.Study_Site__c
          AND is_Invited__c = TRUE
      ];
      PeGetInviteWrapper pegetwrp = new PeGetInviteWrapper();
      if (!piStaffs.isEmpty()) {
        for (Site_Staff__c siteStaff : piStaffs) {
          if (siteStaff.Delegate_Level__c == 'Level 3') {
            pegetwrp.preScreenAccess = false;
          } else {
            pegetwrp.preScreenAccess = true;
          }
        }
      } else {
        pegetwrp.preScreenAccess = true;
      }
      pegetwrp.per = pe;
      pegetwrp.isAllowedForSH = ifAllowedForSH(pe, false);
      allowSH = ifAllowedForSH(pe, false);
      if (
        pe.Participant_Enrollment_Status_History__r != null &&
        !pe.Participant_Enrollment_Status_History__r.isEmpty()
      ) {
        for (
          Participant_Enrollment_Status_History__c pesh : pe.Participant_Enrollment_Status_History__r
        ) {
          pegetwrp.sendToSHDate = pesh.Date__c;
        }
      }
      return pegetwrp;
    } catch (Exception e) {
      throw new AuraHandledException(e.getMessage());
    }
  }
  public static Boolean ifAllowedForSH(
    Participant_Enrollment__c pe,
    Boolean eligibilityStatusPresent
  ) {
    Boolean isAllowedForSH = false;
    if (pe != null) {
      List<String> pshStatus = new List<String>();
      for (Promote_to_SH__mdt psl : [
        SELECT DeveloperName, status__c
        FROM Promote_to_SH__mdt
      ]) {
        pshStatus.add(psl.status__c);
      }
      Boolean logNotPresentOrFailed = (pe.Study_Hub_Log__c == null ||
      (pe.Study_Hub_Log__c != null &&
      pe.Study_Hub_Log__r.Response_Status_Code__c != 201));
      Boolean eligibilyPassedStatusPresent = (eligibilityStatusPresent == true)
        ? true
        : pe.Participant_Enrollment_Status_History__r != null &&
          !pe.Participant_Enrollment_Status_History__r.isEmpty();

      if (
        pe.Clinical_Trial_Profile__r.Promote_to_SH__c == true &&
        (pe.Study_Site__r.Study_Site_Type__c == 'Hybrid' ||
        pe.Study_Site__r.Study_Site_Type__c == 'Virtual') &&
        pshStatus.contains(pe.Participant_Status__c) &&
        ((pe.Participant_Status__c != 'Eligibility Passed' &&
        !eligibilyPassedStatusPresent) ||
        (pe.Participant_Status__c != 'Eligibility Passed' &&
        eligibilyPassedStatusPresent &&
        logNotPresentOrFailed))
      ) {
        isAllowedForSH = true;
      }
    }
    return isAllowedForSH;
  }

  @AuraEnabled
  public static Datetime updateParticipantDataSH(string peId) {
    try {
      List<Participant_Enrollment__c> PEUpdateList = new List<Participant_Enrollment__c>();
      for (Participant_Enrollment__c pe : [
        SELECT
          Id,
          Participant_Status__c,
          High_Priority__c,
          Initial_visit_scheduled_date__c
        FROM Participant_Enrollment__c
        WHERE Id = :peId
      ]) {
        if (pe.Initial_visit_scheduled_date__c != null) {
          pe.High_Priority__c = true;
        } else {
          pe.High_Priority__c = false;
        }

        pe.Participant_Status__c = 'Eligibility Passed';
        pe.Participant_Status_Last_Changed_Date__c = DateTime.now();
        PEUpdateList.add(pe);
      }
      if (PEUpdateList != null && !PEUpdateList.isEmpty()) {
        update PEUpdateList;
      }
      return DateTime.now();
    } catch (Exception e) {
      throw new AuraHandledException(e.getMessage());
    }
  }

  @AuraEnabled
  public static Datetime createUserForPatientProtal(String peId) {
    try {
      Participant_Enrollment__c pe = [
        SELECT
          Id,
          Participant_Contact__c,
          Participant_Contact__r.Is_Patient_User_Created__c,
          PI_Contact__c,
          Invited_To_PP_Date__c,
          HCP_Contact__c,
          HCP_Contact_HCPEnroll__c,
          Clinical_Trial_Profile__r.CommunityTemplate__c
        FROM Participant_Enrollment__c
        WHERE Id = :peId
      ];

      if (!pe.Participant_Contact__r.Is_Patient_User_Created__c) {
        update new Contact(
          Id = pe.Participant_Contact__c,
          Consent_To_Inform_About_Study__c = true,
          Is_Patient_User_Created__c = true
        );
      }

      List<User> returnUsers = new List<User>();
      if (!pe.Participant_Contact__r.Is_Patient_User_Created__c) {
        if (pe.HCP_Contact__c == null) {
          returnUsers = ((CommunityService) ClassFactory.newInstance(
              CommunityService.class
            ))
            .createParticipantUsers(
              new Map<Id, Id>{ pe.Participant_Contact__c => pe.PI_Contact__c }
            );
        } else {
          returnUsers = ((CommunityService) ClassFactory.newInstance(
              CommunityService.class
            ))
            .createParticipantUsers(
              new Map<Id, Id>{
                pe.Participant_Contact__c => pe.HCP_Contact_HCPEnroll__c
              }
            );
        }
      }
      pe.Invited_To_PP_Date__c = DateTime.now();
      update pe;

      Action_AssignContactPermissions actionAssignContactPermissions = new Action_AssignContactPermissions();
      String permissionSetName = CommunityTemplateService.getTemplate(
          pe.Clinical_Trial_Profile__r.CommunityTemplate__c
        )
        .permissionSet;
      actionAssignContactPermissions.addPermission(
        pe.Participant_Contact__c,
        permissionSetName
      );
      if (!actionAssignContactPermissions.isEmpty()) {
        ActionExecutor.executeAsync(
          actionAssignContactPermissions,
          Datetime.now()
        );
      }
      return DateTime.now();
    } catch (Exception e) {
      throw new AuraHandledException(
        e.getMessage() +
        '\n' +
        e.getStackTraceString()
      );
    }
  }

  @AuraEnabled(cacheable=true)
  public static Map<Id, String> getStudyAccessLevel() {
    try {
      Map<Id, String> piStudiesAccessLevel = new Map<Id, String>();
      List<Site_Staff__c> piStaffs = [
        SELECT
          Id,
          Study_Site__c,
          Study_Site__r.Principal_Investigator__c,
          Study_Site__r.Clinical_Trial_Profile__c,
          Delegate_Level__c,
          clinical_Trial_Profile__c,
          Site_Contact__c,
          is_Invited__c
        FROM Site_Staff__c
        WHERE
          (Site_Contact__c = :CommunityService.getUserContact().Id
          OR Study_Site__r.Principal_Investigator__c = :CommunityService.getUserContact()
            .Id)
          AND is_Invited__c = TRUE
      ];
      system.debug('>>>pistaff>>' + piStaffs);
      for (Site_Staff__c siteStaff : piStaffs) {
        if (siteStaff.Site_Contact__c == CommunityService.getUserContact().Id) {
          piStudiesAccessLevel.put(
            siteStaff.Study_Site__c,
            siteStaff.Delegate_Level__c
          );
        }
      }
      system.debug(
        '>>>retrnvalue piStudiesAccessLevel>>' + piStudiesAccessLevel
      );
      return piStudiesAccessLevel;
    } catch (Exception e) {
      throw new AuraHandledException(e.getMessage());
    }
  }

  @AuraEnabled
  public static void setMRRStatus(
    String peId,
    String status,
    String surveyGizmoData
  ) {
    try {
      Participant_Enrollment__c pe = [
        SELECT
          id,
          Medical_Record_Review_Completed_Date__c,
          Medical_Record_Review_Status__c,
          MRR_Survey_Results_URL__c,
          Medical_Record_Review_Completed_by__c,
          Pre_screening_Status__c,
          Study_Site__c,
          Name,
          Participant_Status__c
        FROM Participant_Enrollment__c
        WHERE id = :peId
      ];

      pe.Medical_Record_Review_Completed_Date__c = Datetime.now();
      pe.Medical_Record_Review_Status__c = status;
      if (!Test.isRunningTest()) {
        pe.MRR_Survey_Results_URL__c = surveyGizmoData;
        pe.Medical_Record_Review_Completed_by__c = CommunityService.getUserContact()
          .Id;
      }
      if (status == 'Pass') {
        pe.Pre_screening_Status__c = 'Pass';
      } else {
        pe.Pre_screening_Status__c = 'Fail';
      }
      IncentiveProgramService.completeIncentiveTaskCurrentContact(
        IncentiveTaskCatalog.INCENTIVE_TASK_PRE_SCREENING,
        pe.Study_Site__c,
        pe.Name
      );
      if (pe.Participant_Status__c == 'Received') {
        TriggerHandlerExecutor.bypassHandler(
          ParticipantEnrollmentTriggerHandler.CreateUsersOrSendNotificationsHandler.class
        );
      }
      update pe;
    } catch (Exception e) {
      throw new AuraHandledException(
        e.getMessage() +
        '\n' +
        e.getStackTraceString()
      );
    }
  }

  public class StudyStudySiteWrapper {
    @AuraEnabled
    public Map<String, Id> ctpMap;
    @AuraEnabled
    public Map<Id, List<Study_Site__c>> studySiteMap;
    @AuraEnabled
    public List<Id> ctpNoAccess;
    @AuraEnabled
    public Map<Id, String> siteAccessLevels;
  }

  @AuraEnabled
  public static StudyStudySiteWrapper getStudyStudySite() {
    StudyStudySiteWrapper sswrap = new StudyStudySiteWrapper();
    try {
      String sponsorName = UserContext.getCurrentUserMode()
        .template.templateName;
      String janssen = CommunityTemplateService.TEMPLATE_JANSSEN;
      List<Study_Site__c> studySiteList = getStudySite();
      Map<String, Id> studyMap = new Map<String, Id>();
      Map<Id, List<Study_Site__c>> studySiteMap = new Map<Id, List<Study_Site__c>>();
      for (Study_Site__c s : studySiteList) {
        if (sponsorName == janssen) {
          if (s.Clinical_Trial_Profile__r.CommunityTemplate__c == sponsorName) {
            studyMap.put(
              s.Clinical_Trial_Profile__r.Study_Code_Name__c,
              s.Clinical_Trial_Profile__r.Id
            );
            if (!studySiteMap.containsKey(s.Clinical_Trial_Profile__r.Id)) {
              List<Study_Site__c> stList = new List<Study_Site__c>();
              stList.add(s);
              studySiteMap.put(s.Clinical_Trial_Profile__r.Id, stList);
            } else {
              List<Study_Site__c> stList = studySiteMap.get(
                s.Clinical_Trial_Profile__r.Id
              );
              stList.add(s);
              studySiteMap.put(s.Clinical_Trial_Profile__r.Id, stList);
            }
          }
        } else {
          if (s.Clinical_Trial_Profile__r.CommunityTemplate__c != janssen) {
            studyMap.put(
              s.Clinical_Trial_Profile__r.Study_Code_Name__c,
              s.Clinical_Trial_Profile__r.Id
            );
            if (!studySiteMap.containsKey(s.Clinical_Trial_Profile__r.Id)) {
              List<Study_Site__c> stList = new List<Study_Site__c>();
              stList.add(s);
              studySiteMap.put(s.Clinical_Trial_Profile__r.Id, stList);
            } else {
              List<Study_Site__c> stList = studySiteMap.get(
                s.Clinical_Trial_Profile__r.Id
              );
              stList.add(s);
              studySiteMap.put(s.Clinical_Trial_Profile__r.Id, stList);
            }
          }
        }
      }
      sswrap.ctpMap = studyMap;
      sswrap.studySiteMap = studySiteMap;
      return sswrap;
    } catch (Exception e) {
      throw new AuraHandledException(e.getMessage());
    }
  }
  @AuraEnabled
  public static List<Study_Site__c> getStudySiteDetails() {
    Id piContactId = CommunityService.getUserContact().Id;
    List<String> acceptedSites = new List<String>();
    acceptedSites.add('Accepted');
    acceptedSites.add('Accepted (Admin)');
    List<Study_Site__c> studySiteList = [
      SELECT
        Id,
        Name,
        Site__c,
        Override_PI_Referral_Status__c,
        Site__r.Name,
        Clinical_Trial_Profile__c,
        Clinical_Trial_Profile__r.Study_Code_Name__c,
        Clinical_Trial_Profile__r.CommunityTemplate__c,
        Principal_Investigator__c
      FROM Study_Site__c
      WHERE
        Override_PI_Referral_Status__c IN :acceptedSites
        AND (Principal_Investigator__c = :piContactId
        OR ID IN :DelegateService.getDelegatedStudySiteIds())
    ];

    return studySiteList;
  }
  @AuraEnabled(cacheable=true)
  public static StudyStudySiteWrapper getStudyStudySiteDetails() {
    StudyStudySiteWrapper sswrap = new StudyStudySiteWrapper();
    try {
      String sponsorName = UserContext.getCurrentUserMode()
        .template.templateName;
      String janssen = CommunityTemplateService.TEMPLATE_JANSSEN;
      system.debug('USERMODEE' + sponsorName);
      List<Study_Site__c> studySiteList = getStudySiteDetails();

      Map<String, Id> studyMap = new Map<String, Id>();
      Map<Id, List<Study_Site__c>> studySiteMap = new Map<Id, List<Study_Site__c>>();
      for (Study_Site__c s : studySiteList) {
        if (sponsorName == janssen) {
          if (s.Clinical_Trial_Profile__r.CommunityTemplate__c == sponsorName) {
            studyMap.put(
              s.Clinical_Trial_Profile__r.Study_Code_Name__c,
              s.Clinical_Trial_Profile__r.Id
            );
            if (!studySiteMap.containsKey(s.Clinical_Trial_Profile__r.Id)) {
              List<Study_Site__c> stList = new List<Study_Site__c>();
              stList.add(s);
              studySiteMap.put(s.Clinical_Trial_Profile__r.Id, stList);
            } else {
              List<Study_Site__c> stList = studySiteMap.get(
                s.Clinical_Trial_Profile__r.Id
              );
              stList.add(s);
              studySiteMap.put(s.Clinical_Trial_Profile__r.Id, stList);
            }
          }
        } else {
          if (s.Clinical_Trial_Profile__r.CommunityTemplate__c != janssen) {
            studyMap.put(
              s.Clinical_Trial_Profile__r.Study_Code_Name__c,
              s.Clinical_Trial_Profile__r.Id
            );
            if (!studySiteMap.containsKey(s.Clinical_Trial_Profile__r.Id)) {
              List<Study_Site__c> stList = new List<Study_Site__c>();
              stList.add(s);
              studySiteMap.put(s.Clinical_Trial_Profile__r.Id, stList);
            } else {
              List<Study_Site__c> stList = studySiteMap.get(
                s.Clinical_Trial_Profile__r.Id
              );
              stList.add(s);
              studySiteMap.put(s.Clinical_Trial_Profile__r.Id, stList);
            }
          }
        }
      }
      Map<Id, String> piStudiesAccessLevel = new Map<Id, String>();
      List<Site_Staff__c> piStaffs = [
        SELECT
          Id,
          Study_Site__c,
          Study_Site__r.Principal_Investigator__c,
          Study_Site__r.Clinical_Trial_Profile__c,
          Delegate_Level__c,
          clinical_Trial_Profile__c,
          Site_Contact__c,
          is_Invited__c
        FROM Site_Staff__c
        WHERE
          (Site_Contact__c = :CommunityService.getUserContact().Id
          OR Study_Site__r.Principal_Investigator__c = :CommunityService.getUserContact()
            .Id)
          AND is_Invited__c = TRUE
      ];
      system.debug('>>>pistaff>>' + piStaffs);
      for (Site_Staff__c siteStaff : piStaffs) {
        if (siteStaff.Site_Contact__c == CommunityService.getUserContact().Id) {
          piStudiesAccessLevel.put(
            siteStaff.Study_Site__c,
            siteStaff.Delegate_Level__c
          );
        }
      }
      sswrap.siteAccessLevels = piStudiesAccessLevel;
      sswrap.ctpMap = studyMap;
      sswrap.studySiteMap = studySiteMap;
      sswrap.ctpNoAccess = getStudyAccess(studySiteMap.keyset());
      return sswrap;
    } catch (Exception e) {
      throw new AuraHandledException(e.getMessage());
    }
  }

  public static List<Id> getStudyAccess(Set<Id> ctpIds) {
    List<Clinical_Trial_Profile__c> ctp = new List<Clinical_Trial_Profile__c>();
    map<Id, Id> tc = new Map<Id, Id>();
    map<Id, Id> tcUsr = new Map<Id, Id>();
    List<Id> ctpNoAccess = new List<Id>();
    List<Terms_And_Conditions_Acceptance__c> termsConditions = new List<Terms_And_Conditions_Acceptance__c>();
    ctp = [
      SELECT Id, Terms_And_Conditions_ID__c
      FROM Clinical_Trial_Profile__c
      WHERE Id IN :ctpIds AND Terms_And_Conditions_ID__c != NULL
    ];
    system.debug('ctpids' + ctp.size());
    String UserId = UserInfo.getUserId();
    //String UserId = UserContext.getUserId();
    for (Clinical_Trial_Profile__c c : ctp) {
      tc.put(c.Terms_And_Conditions_ID__c, c.Id);
      system.debug('cid' + c.Terms_And_Conditions_ID__c + c.Id);
    }
    termsConditions = [
      SELECT Id, Terms_And_Conditions__c, User__c
      FROM Terms_And_Conditions_Acceptance__c
      WHERE User__c = :UserId
    ];
    for (Terms_And_Conditions_Acceptance__c tca : termsConditions) {
      tcUsr.put(tca.Terms_And_Conditions__c, tca.User__c);
    }
    for (Clinical_Trial_Profile__c c : ctp) {
      if (!tcUsr.containsKey(c.Terms_And_Conditions_ID__c)) {
        ctpNoAccess.add(tc.get(c.Terms_And_Conditions_ID__c));
      }
    }
    return ctpNoAccess;
  }
  @AuraEnabled
  public static List<LabelValueItem> getAvailableStatuses(
    String status,
    Id StudyId
  ) {
    List<String> availableStatusLists = Label.ListView_GroupStatuses.split(',');
    List<String> availableStatusList = new List<String>();
    List<LabelValueItem> StatusList = new List<LabelValueItem>();
    String availableStatus;

    Clinical_Trial_Profile__c ctp = [
      SELECT
        Promote_to_SH__c,
        Initial_Visit_Required__c,
        Participant_Workflow_Final_Step__c,
        Final_Consent_Required__c
      FROM Clinical_Trial_Profile__c
      WHERE Id = :StudyId
    ];

    Boolean isPromoteToSH = ctp.Promote_to_SH__c;
    Boolean isInitialVisit = ctp.Initial_Visit_Required__c;
    String finalStep = ctp.Participant_Workflow_Final_Step__c;
    Boolean finalConsent = ctp.Final_Consent_Required__c;

    if (availableStatusLists.contains(status)) {
      for (List_View_Status__mdt lvs : [
        SELECT Managed_in_SH__c, Initial_Visit__c, Available_Statuses__c
        FROM List_View_Status__mdt
        WHERE
          Managed_in_SH__c = :isPromoteToSH
          AND Initial_Visit__c = :isInitialVisit
          AND Participant_Status__c = :status
      ]) {
        availableStatusList = lvs.Available_Statuses__c.split(',');
      }
    } else {
      for (List_View_Status__mdt lvs : [
        SELECT
          Participant_Workflow_Final_Step__c,
          Available_Statuses__c,
          Final_Consent__c
        FROM List_View_Status__mdt
        WHERE
          Participant_Workflow_Final_Step__c = :finalStep
          AND Participant_Status__c = :status
          AND Final_Consent__c = :finalConsent
      ]) {
        availableStatusList = lvs.Available_Statuses__c.split(',');
      }
    }

    StatusList.add(new LabelValueItem(Label.ListView_Select_a_Status, 'null'));
    for (String st : availableStatusList) {
      String t = st.replaceAll('[\\s\\-()]', '_');
      if (t == 'Contacted___Not_Suitable') {
        t = 'Contacted_Not_Suitable';
      }
      StatusList.add(new LabelValueItem(TranslateHelper.getLabelValue(t), st));
    }
    return StatusList;
  }
  //Getting the Reason and Notes for popup
  @AuraEnabled
  public static bulkStatusReasonWrapper bulkstatusDetail(
    String newStatus,
    Id studyId
  ) {
    bulkStatusReasonWrapper stWrap = new bulkStatusReasonWrapper();
    PIR_Participant_Workflow_Outcome__mdt pwr = new PIR_Participant_Workflow_Outcome__mdt();
    pwr = [
      SELECT Status_Value__c, Step__c, Reasons_List__c, Order__c
      FROM PIR_Participant_Workflow_Outcome__mdt
      WHERE Status_Value__c = :newStatus
    ];
    stWrap.reason = pwr.Reasons_List__c;
    stWrap.Step = pwr.Step__c;
    stWrap.finalConsent = [
      SELECT Final_Consent_Required__c
      FROM Clinical_Trial_Profile__c
      WHERE Id = :studyId
    ]
    .Final_Consent_Required__c;
    return stWrap;
  }

  public class bulkStatusReasonWrapper {
    @AuraEnabled
    public String reason;
    @AuraEnabled
    public Map<String, List<LabelValueItem>> reasonMap;
    @AuraEnabled
    public Map<String, Boolean> notesRequiredMap;
    @AuraEnabled
    public String notes;
    @AuraEnabled
    public Boolean finalConsent;
    @AuraEnabled
    public String Step;
  }
  //Added for Bulk Action- Status Update

  @AuraEnabled
  public static void updateParticipantStatus(
    List<string> peIdList,
    String StatusToUpdate,
    String Notes,
    String reason,
    String studyId,
    String oParticipantStatus,
    Boolean finalconsent,
    Boolean consentSigned,
    Date signedDate
  ) {
    Savepoint sp = Database.setSavepoint();
    try {
      Map<String, String> initReasonMap = new Map<String, String>{
        'PIR_Other' => 'Other',
        'PWS_Picklist_Value_Other' => 'Other',
        'PIR_Call_Back' => 'Call Back',
        'PWS_Picklist_Value_Transportation_Issues' => 'Transportation Issues',
        'PWS_Picklist_Value_Childcare_Issues' => 'Childcare Issues',
        'PIR_Left_a_Message' => 'Left a Message',
        'PIR_Inadequate_Documentation' => 'Inadequate Documentation',
        'PIR_Does_Not_Meet_Eligibility_Criteria' => 'Does Not Meet Eligibility Criteria',
        'PIR_Not_Ready_to_Schedule' => 'Not Ready to Schedule',
        'PIR_Call_Back' => 'Call Back',
        'PWS_Picklist_Value_Participant_Not_Interested' => 'Participant Not Interested',
        'PIR_Declined_Practitioner' => 'Declined Practitioner',
        'PIR_PI_Decision' => 'PI Decision',
        'PIR_Didnt_Meet_Pre_Screening_Eligibility' => 'Didn\'t Meet Pre-Screening Eligibility',
        'PIR_Did_Not_Meet_Inclusion_Exclusion_Criteria' => 'Did Not Meet Inclusion/Exclusion Criteria',
        'PIR_Did_Not_Attend_Appointment' => 'Did Not Attend Appointment',
        'PWS_Picklist_Value_Protocol_Concerns' => 'Protocol Concerns',
        'PIR_Visit_Out_Of_Window' => 'Visit Out Of Window',
        'Didnt Show For Initial Visit' => 'Didn\'t Show For Initial Visit',
        '' => ''
      };
      if (
        StatusToUpdate == 'Sent to Study Hub' ||
        StatusToUpdate == 'Initial Visit'
      ) {
        StatusToUpdate = 'Eligibility Passed';
      }
      if (StatusToUpdate == 'In Wash Out Period') {
        StatusToUpdate = 'Screening In Progress - Wash Out Period';
      }
      Set<Id> SSId = new Set<Id>();
      Set<Id> planIds = new Set<Id>();
      Map<ID, ID> MapSitePlan = new Map<ID, ID>();
      Map<ID, Incentive_Plan_Task__c> MapPlanTask = new Map<Id, Incentive_Plan_Task__c>();
      List<Incentive_Plan_Task__c> incentiveTasks = new List<Incentive_Plan_Task__c>();
      List<Completed_Incentive_Task__c> lstIncentiveTsk = new List<Completed_Incentive_Task__c>();
      List<Participant_Enrollment_Status_History__c> histories = new List<Participant_Enrollment_Status_History__c>();

      List<Participant_Enrollment__c> PEUpdateList = new List<Participant_Enrollment__c>();
      List<Participant_Enrollment__c> PEIncentiveList = new List<Participant_Enrollment__c>();
      List<Id> PeId = new List<Id>();
      List<Participant_Enrollment_Status_History__c> historiestoUpdate = new List<Participant_Enrollment_Status_History__c>();
      List<Participant_Enrollment_Status_History__c> peshUpdate = new List<Participant_Enrollment_Status_History__c>();

      for (Participant_Enrollment__c pe : [
        SELECT
          Id,
          Name,
          Participant_Status__c,
          Study_Site__c,
          Last_Status_Changed_Notes__c,
          Non_Enrollment_Reason__c,
          Participant_Status_Last_Changed_Date__c,
          Final_consent__c,
          Non_Referral_Notes__c,
          Non_Referral_Reason__c,
          Informed_Consent__c,
          Informed_Consent_Date__c,
          Initial_visit_scheduled_time__c,
          Initial_visit_scheduled_date__c
        FROM Participant_Enrollment__c
        WHERE Id IN :peIdList
      ]) {
        pe.Participant_Status__c = StatusToUpdate;
        pe.Non_Referral_Notes__c = Notes;
        pe.Last_Status_Changed_Notes__c = Notes;
        pe.Non_Enrollment_Reason__c = initReasonMap.get(reason);
        pe.Final_consent__c = finalconsent;
        pe.Participant_Status_Last_Changed_Date__c = system.now();
        if (consentSigned != null && signedDate != null) {
          pe.Informed_Consent__c = consentSigned;
          pe.Informed_Consent_Date__c = signedDate;
        }

        if (
          pe.Participant_Status__c == PEStatusState.PE_STATUS_UNABLE_TO_REACH ||
          pe.Participant_Status__c ==
          PEStatusState.PE_STATUS_CONTACTED_NOT_SUITABLE ||
          pe.Participant_Status__c == PEStatusState.PE_STATUS_PRE_REVIEW_FAILED
        ) {
          pe.Initial_visit_scheduled_date__c = null;
          pe.Initial_visit_scheduled_time__c = null;
        }
        PEUpdateList.add(pe);
        PeId.add(pe.Id);
        if (
          pe.Participant_Status_Last_Changed_Date__c.date()
            .daysBetween(Date.today()) <= 1
        ) {
          PEIncentiveList.add(pe);
        }

        SSId.add(pe.Study_Site__c);
        //logic for ready to screen start
        if (
          (oParticipantStatus == PEStatusState.PE_STATUS_DECLINED_CONSENT ||
          oParticipantStatus == PEStatusState.PE_STATUS_WITHDREW_CONSENT) &&
          (pe.Participant_Status__c != PEStatusState.PE_STATUS_READY_TO_SCREEN)
        ) {
          histories.add(
            new Participant_Enrollment_Status_History__c(
              Date__c = pe.Participant_Status_Last_Changed_Date__c,
              Status__c = PEStatusState.PE_STATUS_READY_TO_SCREEN,
              Notes__c = Notes,
              Non_Enrollment_Reason__c = initReasonMap.get(reason),
              ParticipantEnrollment__c = pe.Id
            )
          );
        }
        //logic for ready to screen end
        if (
          (oParticipantStatus == PEStatusState.PE_STATUS_READY_TO_SCREEN ||
          oParticipantStatus == PEStatusState.PE_STATUS_SCREENING_IN_PROGRESS ||
          oParticipantStatus == PEStatusState.PE_STATUS_DECLINED_CONSENT ||
          oParticipantStatus == PEStatusState.PE_STATUS_UNABLE_TO_SCREEN ||
          oParticipantStatus == PEStatusState.PE_STATUS_WITHDREW_CONSENT ||
          oParticipantStatus == PEStatusState.PE_STATUS_SCREENING_FAILED ||
          oParticipantStatus ==
          PEStatusState.PE_STATUS_SCREENING_IN_PROGRESS_WASH_OUT_PERIOD) &&
          (pe.Participant_Status__c ==
          PEStatusState.PE_STATUS_ENROLLMENT_SUCCESS ||
          pe.Participant_Status__c ==
          PEStatusState.PE_STATUS_RANDOMIZATION_SUCCESS ||
          pe.Participant_Status__c ==
          PEStatusState.PE_STATUS_ENROLLMENT_FAILED ||
          pe.Participant_Status__c ==
          PEStatusState.PE_STATUS_RANDOMIZATION_FAILED ||
          pe.Participant_Status__c ==
          PEStatusState.PE_STATUS_WITHDREW_CONSENT_AFTER_SCREENING ||
          pe.Participant_Status__c ==
          PEStatusState.PE_STATUS_DECLINED_FINAL_CONSENT)
        ) {
          histories.add(
            new Participant_Enrollment_Status_History__c(
              Date__c = pe.Participant_Status_Last_Changed_Date__c,
              Status__c = PEStatusState.PE_STATUS_SCREENING_PASSED,
              ParticipantEnrollment__c = pe.Id
            )
          );
        }
        if (
          (pe.Participant_Status__c != PEStatusState.PE_STATUS_RECEIVED &&
          pe.Participant_Status__c !=
          PEStatusState.PE_STATUS_ELIGIBILITY_PASSED) ||
          (oParticipantStatus == PEStatusState.PE_STATUS_RECEIVED &&
          pe.Participant_Status__c == PEStatusState.PE_STATUS_RECEIVED)
        ) {
          histories.add(
            new Participant_Enrollment_Status_History__c(
              Date__c = pe.Participant_Status_Last_Changed_Date__c,
              Status__c = pe.Participant_Status__c,
              Notes__c = Notes,
              ParticipantEnrollment__c = pe.Id,
              Non_Enrollment_Reason__c = initReasonMap.get(reason)
            )
          );
        }
      }
      TriggerHandlerExecutor.bypassHandler(
        ParticipantEnrollmentSHTriggerHandler.CreateUsersOrSendNotificationsHandler.class
      );
      TriggerHandlerExecutor.bypassHandler(
        ParticipantEnrollmentSHTriggerHandler.UpdatePEHandler.class
      );
      TriggerHandlerExecutor.bypassHandler(PETriggerHandler.class);
      TriggerHandlerExecutor.bypassHandler(
        ParticipantEnrollmentTriggerHandler.SetSourceTypeHandler.class
      );
      TriggerHandlerExecutor.bypassHandler(
        ParticipantEnrollmentTriggerHandler.createPrimaryHistoryEntry.class
      );
      TriggerHandlerExecutor.bypassHandler(
        ParticipantEnrollmentTriggerHandler.PrepareAdditionalFieldsHandler.class
      );
      TriggerHandlerExecutor.bypassHandler(
        ParticipantEnrollmentTriggerHandler.CreateStatusBasedInvitations.class
      );
      TriggerHandlerExecutor.bypassHandler(
        PENotificationTriggerHandler.SendEmailIfSSWasChanged.class
      );
      TriggerHandlerExecutor.bypassHandler(
        ParticipantEnrollmentTriggerHandler.CheckVisitPlanFromStudySiteHandler.class
      );
      TriggerHandlerExecutor.bypassHandler(
        ParticipantEnrollmentTriggerHandler.UpdateParticipantState.class
      );

      TriggerHandlerExecutor.bypassHandler(
        ParticipantEnrollmentTriggerHandler.DeactivateDeceasedUsersHandler.class
      );
      TriggerHandlerExecutor.bypassHandler(
        ParticipantEnrollmentTriggerHandler.CreateVisitsScheduleHandler.class
      );
      TriggerHandlerExecutor.bypassHandler(
        ParticipantEnrollmentTriggerHandler.CreateWelcomeToStudyAlertHandler.class
      );
      TriggerHandlerExecutor.bypassHandler(
        ParticipantEnrollmentTriggerHandler.HideSurveyTasks.class
      );
      TriggerHandlerExecutor.bypassHandler(
        PENotificationTriggerHandler.CreateNotificationHandler.class
      );
      TriggerHandlerExecutor.bypassHandler(
        ParticipantEnrollmentTriggerHandler.CompleteEnrollmentTasks.class
      );
      TriggerHandlerExecutor.bypassHandler(
        ParticipantEnrollmentTriggerHandler.StudySiteHistoryHandler.class
      );
      TriggerHandlerExecutor.bypassHandler(
        ParticipantEnrollmentTriggerHandler.CheckReimbursableActivities.class
      );
      /* TriggerHandlerExecutor.bypassHandler(
                            ParticipantEnrollmentTriggerHandler.SendFOVtoAPI.class
                        );*/
      TriggerHandlerExecutor.bypassHandler(
        ParticipantEnrollmentTriggerHandler.UnenrollorCancelPer.class
      );

      if (PEUpdateList != null && !PEUpdateList.isEmpty()) {
        update PEUpdateList;
      }

      if (histories != null && !histories.isEmpty()) {
        TriggerHandlerExecutor.bypassHandler(
          ParticipantEnrollmentSHTriggerHandler.updateEnrollmentStatus.class
        );
        insert histories;
      }
      if (PeId != null && !PeId.isEmpty()) {
        if (StatusToUpdate == 'Received') {
          historiestoUpdate = [
            SELECT
              id,
              Backward_Bulk_Update__c,
              Status__c,
              ParticipantEnrollment__c
            FROM Participant_Enrollment_Status_History__c
            WHERE
              ParticipantEnrollment__c IN :peId
              AND Status__c != :StatusToUpdate
          ];
          for (
            Participant_Enrollment_Status_History__c psh : historiestoUpdate
          ) {
            psh.Backward_Bulk_Update__c = true;
            peshUpdate.add(psh);
          }
        }
        if (peshUpdate != null && !peshUpdate.isEmpty()) {
          update peshUpdate;
        }
      }

      if (
        oParticipantStatus == PEStatusState.PE_STATUS_RECEIVED &&
        (StatusToUpdate == PEStatusState.PE_STATUS_CONTACT_ATTEMPTED ||
        StatusToUpdate == PEStatusState.PE_STATUS_SUCCESSFULLY_CONTACTED ||
        StatusToUpdate == PEStatusState.PE_STATUS_CONTACTED_NOT_SUITABLE ||
        StatusToUpdate == PEStatusState.PE_STATUS_UNABLE_TO_REACH)
      ) {
        if (PEIncentiveList.size() > 0 || !PEIncentiveList.isEmpty()) {
          ID ContacId = UserContext.getUserContactId();
          for (Study_Incentive_Plan__c studyIncentivePlan : [
            SELECT
              Id,
              Incentive_Plan__c,
              Clinical_Trial_Profile__c,
              Study_Site__c
            FROM Study_Incentive_Plan__c
            WHERE
              Study_Site__c IN :SSId
              AND Study_Site__r.Clinical_Trial_Profile__r.CommunityTemplate__c != :CommunityTemplateService.TEMPLATE_JANSSEN
          ]) {
            planIds.add(studyIncentivePlan.Incentive_Plan__c);
            MapSitePlan.put(
              studyIncentivePlan.Study_Site__c,
              studyIncentivePlan.Incentive_Plan__c
            );
          }
          if (!planIds.isEmpty()) {
            incentiveTasks = [
              SELECT
                Id,
                Points__c,
                Enabled__c,
                IQVIA_Supported__c,
                Incentive_Plan__c
              FROM Incentive_Plan_Task__c
              WHERE
                Incentive_Plan__c IN :planIds
                AND Enabled__c = TRUE
                AND Incentive_Task_Catalog__c = :IncentiveTaskCatalog.INCENTIVE_TASK_MADE_CONTACT_ATTEMPT_WITHIN_1_DAY
            ];
            if (!incentiveTasks.isEmpty()) {
              for (Incentive_Plan_Task__c ipt : incentiveTasks) {
                MapPlanTask.put(ipt.Incentive_Plan__c, ipt);
              }
              for (Participant_Enrollment__c per : PEIncentiveList) {
                if (MapSitePlan.containsKey(per.Study_Site__c)) {
                  Incentive_Plan_Task__c pt = MapPlanTask.get(
                    MapSitePlan.get(per.Study_Site__c)
                  );
                  Completed_Incentive_Task__c completedIncentiveTask = new Completed_Incentive_Task__c();
                  completedIncentiveTask.Completed_By__c = ContacId;
                  completedIncentiveTask.Completed_Date__c = Datetime.now();
                  completedIncentiveTask.Incentive_Task_Catalog__c = IncentiveTaskCatalog.INCENTIVE_TASK_MADE_CONTACT_ATTEMPT_WITHIN_1_DAY;
                  completedIncentiveTask.Points__c = pt.Points__c;
                  completedIncentiveTask.Completed_For__c = per.Name;
                  lstIncentiveTsk.add(completedIncentiveTask);
                }
              }
              insert lstIncentiveTsk;
            }
          }
        }
      }
    } catch (Exception e) {
      Database.rollback(sp);
      throw new AuraHandledException(
        e.getMessage() +
        '\n' +
        e.getStackTraceString()
      );
    }
  }
}