/**
 * Created by Igor Malyuta on 11.09.2019.
 */

public without sharing class Batch_CreateSummaryNotifications extends Batch_ScheduledAbstract {

    public Database.QueryLocator start(Database.BatchableContext param1) {
        return Database.getQueryLocator([
                SELECT
                        Active_After_Days__c,
                        Active_On_Status__c,
                        Clinical_Trial_Profile__c,
                        Expires_After_Days__c,
                        Expires_On_Status__c,
                        Id,
                        Notify_On_Availability__c,
                        Resource__c,
                        Visible_In_Alumni__c,
                        Visible_To_Delegates__c,
                        Visible_To_Participant__c,
                        Visible_To_PI__c,
                        Visible_To_RP__c
                FROM Res_study__c
                WHERE Notify_On_Availability__c = TRUE
                AND Visible_To_Participant__c = TRUE
                AND Resource__r.Content_Type__c = 'Study_Document'
        ]);
    }

    public void execute(Database.BatchableContext param1, List<Res_study__c> resStudies) {
        Map<Id, List<Res_study__c>> resStudyByCtp = new Map<Id, List<Res_study__c>>();
        Set<Id> resIds = new Set<Id>();
        for (Res_study__c res : resStudies) {
            if (!resStudyByCtp.containsKey(res.Clinical_Trial_Profile__c)) {
                resStudyByCtp.put(res.Clinical_Trial_Profile__c, new List<Res_study__c>());
            }
            resStudyByCtp.get(res.Clinical_Trial_Profile__c).add(res);
            resIds.add(res.Resource__c);
        }

        List<ContentDocumentLink> contentDocumentLinks = [
                SELECT Id, ContentDocument.Title, LinkedEntityId
                FROM ContentDocumentLink
                WHERE LinkedEntityId IN:resIds
        ];
        Set<String> resLangs = new Set<String>();
        Map<Id, List<String>> contentLangByResId = new Map<Id, List<String>>();
        for (ContentDocumentLink content : contentDocumentLinks) {
            if (!contentLangByResId.containsKey(content.LinkedEntityId)) {
                contentLangByResId.put(content.LinkedEntityId, new List<String>());
            }
            contentLangByResId.get(content.LinkedEntityId).add(content.ContentDocument.Title);
            resLangs.add(content.ContentDocument.Title);
        }


        List<Participant_Enrollment__c> enrollment = [
                SELECT
                        Id,
                        Clinical_Trial_Profile__c,
                        Days_After_Enrolled__c,
                        Participant_Contact__c,
                        Participant_Contact__r.Language__c,
                        Participant_Contact__r.Participant_Opt_In_Status_Emails__c,
                        Participant_Contact__r.Resource_Notifications__c,
                        Participant_Contact__r.userCommunityMode__c,
                        Participant_Status__c,
                        Study_Site__r.Approved_Lng__c
                FROM Participant_Enrollment__c
                WHERE Clinical_Trial_Profile__c IN:resStudyByCtp.keySet()
                AND Study_Site__r.Approved_Lng__c IN:resLangs
                AND Participant__c != NULL
                AND Participant_Contact__c != NULL
        ];

        Map<Id, List<String>> resIdsByContactId = new Map<Id, List<String>>();
        List<Contact> contactToNotify = new List<Contact>();
        Map<Id, Id> peIdByContact = new Map<Id, Id>();
        for (Participant_Enrollment__c pe : enrollment) {
            List<Contact> peContacts = new List<Contact>();
            peContacts.add(pe.Participant_Contact__r);
            peContacts.addAll(PatientDelegateService.getDelegateContacts(pe.Participant_Contact__c));

            for (Res_study__c res : resStudyByCtp.get(pe.Clinical_Trial_Profile__c)) {
                for (Contact contact : peContacts) {
                    Boolean isDelegate = pe.Participant_Contact__c != contact.Id;
                    if (contact.userCommunityMode__c == null) continue;

                    if (StudyResourceVisibilityService.isResourceVisibleForPE(
                            res, pe, contentLangByResId.get(res.Resource__c), contact.userCommunityMode__c, isDelegate)) {
                        if (needNotify(contact, res.Resource__c)) {
                            contactToNotify.add(contact);
                            peIdByContact.put(contact.Id, pe.Id);

                            if (!resIdsByContactId.containsKey(contact.Id)) {
                                List<String> resNotificationIds = contact.Resource_Notifications__c != null ?
                                        contact.Resource_Notifications__c.split(';') : new List<String>();
                                resIdsByContactId.put(contact.Id, resNotificationIds);
                            }
                            resIdsByContactId.get(contact.Id).add(res.Resource__c);
                        }
                    }
                }
            }
        }

        if (!contactToNotify.isEmpty()) {
            SendEmailToParticipant.sendPlainSummaryNotifications(
                    contactToNotify, peIdByContact, SendEmailToParticipant.PATIENT_SUMMARY_DOCUMENT);

            List<Contact> contactsToUpdate = new List<Contact>();
            for (Contact con : contactToNotify) {
                if (!resIdsByContactId.containsKey(con.Id)) continue;

                con.Resource_Notifications__c = String.join(resIdsByContactId.get(con.Id), ';');
                resIdsByContactId.remove(con.Id);
                contactsToUpdate.add(con);
            }

            update contactsToUpdate;
        }
    }

    public override Type getType() {
        return Batch_CreateSummaryNotifications.class;
    }

    private Boolean needNotify(Contact contact, Id resourceId) {
        Boolean notify = false;
        if (contact.Resource_Notifications__c == null || !contact.Resource_Notifications__c.contains(resourceId)) {
            notify = true;
        }

        return notify;
    }
}
